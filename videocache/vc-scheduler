#!/usr/bin/env python
#
# (C) Copyright White Magnet Software Private Limited
# Company Website : http://whitemagnet.com/
# Product Website : http://cachevideos.com/
#

__author__ = """Kulbir Saini <saini@saini.co.in>"""
__docformat__ = 'plaintext'

from common import *
from error_codes import *
from fork import fork
from store import search_cache, free_space, get_filelist
from vcdaemon import VideocacheDaemon
from vcoptions import VideocacheOptions
from vcsysinfo import *
from websites.youtube import *

from optparse import OptionParser
from SimpleXMLRPCServer import SimpleXMLRPCServer
from xmlrpclib import ServerProxy

import cgi
import cookielib
import heapq
import logging
import pickle
import pyinotify
import pwd
import shutil
import socket
import sys
import threading
import time
import traceback
import urllib2
import urlparse

# Cookie processor and default socket timeout
cj = cookielib.CookieJar()
urllib2.install_opener(urllib2.build_opener(urllib2.HTTPCookieProcessor(cj)))
socket.setdefaulttimeout(90)

def info(params = {}):
    if o.enable_scheduler_log:
        params.update({ 'logformat' : o.scheduler_logformat, 'timeformat' : o.timeformat, 'levelname' : logging.getLevelName(logging.INFO), 'process_id' : process_id })
        o.vcs_logger.info(build_message(params))

def error(params = {}):
    if o.enable_scheduler_log:
        params.update({ 'logformat' : o.scheduler_logformat, 'timeformat' : o.timeformat, 'levelname' : logging.getLevelName(logging.ERROR), 'process_id' : process_id })
        o.vcs_logger.error(build_message(params))

def warn(params = {}):
    if o.enable_scheduler_log:
        params.update({ 'logformat' : o.scheduler_logformat, 'timeformat' : o.timeformat, 'levelname' : logging.getLevelName(logging.WARN), 'process_id' : process_id })
        o.vcs_logger.debug(build_message(params))

def cleaner_info(params = {}):
    if o.enable_cleaner_log:
        params.update({ 'logformat' : o.cleaner_logformat, 'timeformat' : o.timeformat, 'levelname' : logging.getLevelName(logging.INFO), 'process_id' : process_id})
        o.vcc_logger.info(build_message(params))

def cleaner_error(params = {}):
    if o.enable_cleaner_log:
        params.update({ 'logformat' : o.cleaner_logformat, 'timeformat' : o.timeformat, 'levelname' : logging.getLevelName(logging.ERROR), 'process_id' : process_id})
        o.vcc_logger.error(build_message(params))

def cleaner_warn(params = {}):
    if o.enable_cleaner_log:
        params.update({ 'logformat' : o.cleaner_logformat, 'timeformat' : o.timeformat, 'levelname' : logging.getLevelName(logging.WARN), 'process_id' : process_id})
        o.vcc_logger.debug(build_message(params))

def trace(params = {}):
    if o.enable_trace_log:
        params.update({ 'logformat' : o.trace_logformat, 'timeformat' : o.timeformat, 'process_id' : process_id })
        o.trace_logger.info(build_message(params))

def connection():
    global video_pool
    try:
        video_pool.ping()
    except Exception, e:
        try:
            video_pool = ServerProxy(o.rpc_url)
            video_pool.ping()
            info({ 'code' : RPC_CONNECT, 'message' : 'Connected to RPC server.'})
        except Exception, e:
            error({ 'code' : RPC_CONNECT_ERR, 'message' : 'Could not connect to RPC server (videocache scheduler) at ' + o.rpc_host + ':' + str(o.rpc_port) + '. Please check scheduler status. If needed, restart scheduler using \'vc-scheduler -s restart\' command.', 'debug' : str(e)})
            trace({ 'code' : RPC_CONNECT_ERR, 'message' : traceback.format_exc() })

class VideoPool:
    scores_rebuild_threshold = 120
    systems = []
    hit_time_threshold = 15
    last_dump = 0
    dump_threshold = 120
    disk_space = {}
    disk_space_last_update = 0
    disk_space_update_threshold = 300
    last_used_dir = 0
    sync_lock = threading.Semaphore(value = 1)
    sync_threshold = 600

    # To be scoped
    scores = {} # scores = { 'youtube' : { 'video_id' : score }, ... }
    queue = {} # queue = { 'youtube' : { 'video_id' : { 'url' : url }, ... }, ... }
    active = {} # active = { 'youtube' : { 'video_id' : thread }, ... }
    scores_pq = {} # scores_pq = { 'youtube' : [ (score, 'video_id'), ... ], ... }
    scores_changed = {} # scores_changed = { 'youtube' : True, ... }
    last_scores_rebuild = {} # last_scores_rebuild = { 'youtube' : time, ... }
    last_sync = {} # last_sync = { 'youtube' : time, ... }

    def __init__(self):
        for website_id in o.websites:
            self.scores[website_id] = {}
            self.queue[website_id] = {}
            self.active[website_id] = {}
            self.scores_pq[website_id] = []
            self.scores_changed[website_id] = True
            self.last_scores_rebuild[website_id] = 0
            self.last_sync[website_id] = 0

    def ping(self):
        return True

    def add_system(self, new_system = {}):
        sys_info = { 'id' : o.id, 'email' : o.client_email, 'version' : o.version }
        sys_info.update(get_all_info())
        for system in [new_system, sys_info]:
            if system != {} and system not in self.systems:
                self.systems.append(system)
        return True

    def get_systems(self):
        self.add_system()
        return self.systems

    def load_queue(self):
        for dir in o.base_dir_list:
            queue_file = os.path.join(dir, o.queue_dump_file)
            if os.path.isfile(queue_file):
                try:
                    [scores, queue] = pickle.load(file(queue_file, 'r'))
                    # Different statement just in case the exception messes up assignment.
                    self.scores, self.queue = scores, queue
                    self.trim_queue()
                    info( { 'code' : QUEUE_LOAD, 'message' : 'Video queue loaded from dump file.' } )
                    return True
                except Exception, e:
                    warn( { 'code' : QUEUE_LOAD_WARN, 'message' : 'Unable to load video queue from dump file at ' + queue_file + '.', 'debug' : str(e) } )
                    trace( { 'code' : QUEUE_LOAD_WARN, 'message' : traceback.format_exc() } )
        return False

    def dump_queue(self, now = False):
        if now or (self.queue_changed_after_dump() and time.time() - self.last_dump > self.dump_threshold):
            info({ 'code' : 'QUEUE_DUMPED' })
            self.last_dump = time.time()
            queue_dump_string = pickle.dumps([self.scores, self.queue])
            for dir in o.base_dir_list:
                queue_file = os.path.join(dir, o.queue_dump_file)
                try:
                    file(queue_file, 'w').write(queue_dump_string)
                except Exception, e:
                    warn( { 'code' : QUEUE_DUMP_WARN, 'message' : 'Unable to dump video queue to dump file at ' + queue_file + '.', 'debug' : str(e) } )
                    trace( { 'code' : QUEUE_DUMP_WARN, 'message' : traceback.format_exc() } )
        return True

    def queue_changed_after_dump(self):
        for website_id in o.websites:
            if self.scores_changed[website_id] or self.last_scores_rebuild[website_id] > self.last_dump: return True
        return False

    def add_videos(self, videos = {}):
        info( { 'code' : VIDEOS_RECEIVED, 'message' : 'Received ' + str(len(videos)) + ' videos from Videocache.' } )

        self.trim_queue()

        self.sync_lock.acquire()
        for video_id in videos:
            for params in videos[video_id]:
                self.add_video(video_id, params)
        self.sync_lock.release()
        return True

    def add_video(self, video_id, params):
        website_id = params['website_id']
        if video_id not in self.queue[website_id]:
            self.queue[website_id][video_id] = params
            self.set_score(video_id, website_id, 1)
        else:
            old_data = self.queue[website_id][video_id]
            try:
                if params['client_ip'] == old_data['client_ip'] and (int(params['access_time']) - int(old_data['access_time'])) > self.hit_time_threshold:
                    self.inc_score(video_id, website_id)
                    self.queue[website_id][video_id].update( { 'access_time' : params['access_time'] } )
            except Exception, e:
                self.inc_score(video_id, website_id)
        return True

    def trim_queue(self):
        videos_in_queue = self.get_queue_length()
        if videos_in_queue - o.max_cache_queue_size >= 0:
            self.remove_least_popular(videos_in_queue - o.max_cache_queue_size + 1)
        return True

    def sync_queue(self, website_id = None, sync_now = False):
        if website_id:
            if sync_now or (time.time() - self.last_sync[website_id]) > self.sync_threshold:
                self.sync_lock.acquire()
                new_queue = {}
                for video_id in self.scores[website_id].keys():
                    if video_id in self.queue[website_id]:
                        new_queue[video_id] = self.queue[website_id][video_id]
                self.queue[website_id] = new_queue
                self.last_sync[website_id] = time.time()
                self.sync_lock.release()
        else:
            [self.sync_queue(web_id, sync_now) for web_id in o.websites]
        return True

    def rebuild_scores_pq(self, website_id = None, rebuild_scores_now = False):
        if website_id:
            #FIXME AND vs OR when to rebuild scores priority queue
            #if self.scores_changed[website_id] and (rebuild_scores_now or time.time() - self.last_scores_rebuild[website_id] > self.scores_rebuild_threshold):
            #FIXME rebuilding scores makes sense only if they have changed.
            #if self.scores_changed[website_id] or (rebuild_scores_now or time.time() - self.last_scores_rebuild[website_id] > self.scores_rebuild_threshold):
            if rebuild_scores_now or self.scores_changed[website_id]:
                self.scores_pq[website_id] = [(v,k) for k,v in self.scores[website_id].items()]
                self.scores_changed[website_id], self.last_scores_rebuild[website_id] = False, time.time()
        else:
            [self.rebuild_scores_pq(web_id, rebuild_scores_now) for web_id in o.websites]
        return True

    def get_score(self, video_id, website_id):
        """Get the score of video represented by video_id."""
        return self.scores[website_id].get(video_id, 0)

    def set_score(self, video_id, website_id, score = 1):
        """Set the priority score of a video_id."""
        self.scores[website_id][video_id] = score
        self.scores_changed[website_id] = True
        return True

    def inc_score(self, video_id, website_id, incr = 1):
        """Increase the priority score of video represented by video_id."""
        if video_id in self.scores[website_id]:
            self.scores[website_id][video_id] += incr
            self.scores_changed[website_id] = True
            return True
        return False

    def dec_score(self, video_id, website_id, decr = 1):
        """Decrease the priority score of video represented by video_id."""
        if video_id in self.scores[website_id]:
            self.scores[website_id][video_id] -= decr
            self.scores_changed[website_id] = True
            return True
        return False

    def get_popular(self, count = 1, website_id = None):
        """Return the video_id of the most frequently access video."""
        self.sync_queue(website_id)
        self.rebuild_scores_pq(website_id)

        if website_id:
            return [(video_id, website_id) for score, video_id in heapq.nlargest(count, self.scores_pq[website_id])]
        else:
            return [(v, w) for s, v, w in heapq.nlargest(count, [(self.get_score(vid, wid), vid, wid) for vid, wid in [hit for hit_list in [self.get_popular(count, web_id) for web_id in o.websites] for hit in hit_list]])]

    def get_least_popular(self, count = 1, website_id = None):
        """Get `count` number of least popular videos"""
        self.rebuild_scores_pq(website_id)

        if website_id:
            return [(video_id, website_id) for score, video_id in heapq.nsmallest(count, self.scores_pq[website_id])]
        else:
            return [(v, w) for s, v, w in heapq.nsmallest(count, [(self.get_score(vid, wid), vid, wid) for vid, wid in [flop for flop_list in [self.get_least_popular(count, web_id) for web_id in o.websites] for flop in flop_list]])]

    def remove_least_popular(self, count = 1, website_id = None):
        """Remove `count` number of least popular videos fromt the queue."""
        for video_id, web_id in self.get_least_popular(count, website_id):
            self.remove(video_id, web_id)
        return True

    def get_details(self, video_id, website_id):
        """Return the details of a particular video represented by video_id."""
        return self.queue[website_id].get(video_id, False)

    def remove_from_queue(self, video_id, website_id):
        """Dequeue a video_id from the download queue."""
        item = (self.get_score(video_id, website_id), video_id)
        item in self.scores_pq[website_id] and self.scores_pq[website_id].remove(item)
        self.scores_changed[website_id] = True
        video_id in self.queue[website_id] and self.queue[website_id].pop(video_id)
        video_id in self.scores[website_id] and self.scores[website_id].pop(video_id)
        return True

    def remove_url_from_queue(self, video_id, website_id, url):
        """Dequeue a url for a video_id from the download queue."""
        video_id in self.queue[website_id] and url in self.queue[website_id][video_id]['urls'] and self.queue[website_id][video_id]['urls'].remove(url)
        return True

    def remove(self, video_id, website_id):
        """Remove video_id from queue as well as active connection list."""
        return self.remove_from_queue(video_id, website_id) and self.remove_conn(video_id, website_id)

    def remove_url(self, video_id, website_id, url):
        """Remove url from url list for a video_id."""
        if len(self.queue[website_id][video_id]['urls']) == 1:
            return self.remove(video_id, website_id)
        else:
            return self.remove_url_from_queue(video_id, website_id, url)

    def flush(self, website_id = None):
        """Flush the queue and reinitialize everything."""
        if website_id:
            self.scores[website_id] = {}
            self.queue[website_id] = {}
            self.active[website_id] = {}
            self.scores_pq[website_id] = []
            self.scores_changed[website_id] = True
            self.last_scores_rebuild[website_id] = 0
            self.last_sync[website_id] = 0
            return True
        else:
            [self.flush(web_id) for web_id in o.websites]
        self.dump_queue(True)
        return True

    def get_queue_length(self, website_id = None):
        if website_id:
            return len(self.scores[website_id])
        else:
            return sum([self.get_queue_length(web_id) for web_id in o.websites])

    def get_pq_length(self, website_id = None):
        if website_id:
            return len(self.scores_pq[website_id])
        else:
            return sum([self.get_pq_length(web_id) for web_id in o.websites])

    def get_active(self, website_id = None):
        if website_id:
            return self.active[website_id]
        else:
            return self.active

    def get_scores(self, website_id = None):
        if website_id:
            return self.scores[website_id]
        else:
            return self.scores

    def get_queue(self, website_id = None):
        if website_id:
            return self.queue[website_id]
        else:
            return self.queue

    def get_scores_pq(self, website_id = None):
        if website_id:
            return self.scores_pq[website_id]
        else:
            return self.scores_pq

    def update_disk_space(self, now = False):
        if now or int(time.time() - self.disk_space_last_update) > self.disk_space_update_threshold:
            self.disk_space_last_update = time.time()
            for dir in o.base_dir_list:
                space_available = free_space(dir)
                self.disk_space[dir] = { 'free_space' : space_available, 'use' : True }
                if space_available < o.disk_avail_threshold:
                    self.disk_space[dir].update( { 'use' : False } )
        return True

    def get_next_cache_dir(self):
        self.update_disk_space()
        if o.base_dir_selection == 1:
            for dir in o.base_dir_list:
                if self.disk_space[dir]['use']:
                    return dir
        elif o.base_dir_selection == 2:
            for dir in o.base_dir_list[(self.last_used_dir + 1):] + o.base_dir_list[:(self.last_used_dir + 1)]:
                if self.disk_space[dir]['use']:
                    self.last_used_dir = o.base_dir_list.index(dir)
                    return dir
        elif o.base_dir_selection == 3:
            vk = [(v['free_space'], k) for k, v in self.disk_space.items()]
            for v, dir in sorted(vk, reverse = True):
                if self.disk_space[dir]['use']:
                    self.last_used_dir = o.base_dir_list.index(dir)
                    return dir

        warn({'code' : CACHE_DIR_FULL, 'message' : 'All your cache directories have reached the disk availability threshold.'})
        fork(cleancache)()
        return o.base_dir_list[0]

    def start_cache_thread(self, video_id, website_id, params):
        """Start a new thread which will cache the vdieo"""
        new_thread = threading.Thread(target = cache, name = str(video_id), kwargs = { 'params' : params })
        self.set_score(video_id, website_id, 0)
        self.add_conn(video_id, website_id, new_thread)
        new_thread.start()
        info( { 'code' : CACHE_THREAD_START, 'website_id' : website_id, 'video_id' : video_id, 'client_ip' : params['client_ip'], 'message' : 'Starting cache thread.' } )
        return True

    def clean_threads(self, website_id = None):
        """Cleanup threads which have exitted."""
        if website_id:
            for (video_id, thread) in self.active[website_id].items():
                try:
                    if not thread.isAlive():
                        self.remove(video_id, website_id)
                        info( { 'code' : CACHE_THREAD_REMOVE, 'video_id' : video_id, 'website_id' : website_id, 'message' : 'Cache thread completed. Removing from active list.' } )
                except Exception, e:
                    error( { 'code' : CACHE_THREAD_REMOVE_ERR, 'website_id' : website_id, 'message' : 'Unable to remove cache thread from thread list', 'debug' : str(e), 'video_id' : video_id } )
                    trace( { 'code' : CACHE_THREAD_REMOVE_ERR, 'website_id' : website_id, 'message' : traceback.format_exc(), 'video_id' : video_id } )
        else:
            [self.clean_threads(web_id) for web_id in o.websites]
        return True

    def schedule(self):
        try:
            self.clean_threads()
            self.dump_queue()
            if o.offline_mode or not is_caching_time():
                return False
            if self.get_conn_number() < o.max_cache_processes:
                popular = self.get_popular()
                info({'code' : str(popular) })
                if len(popular) != 1 or len(popular[0]) != 2:
                    return False
                video_id, website_id = popular[0]
                if video_id != False and self.is_active(video_id, website_id) == False and self.get_score(video_id, website_id) >= o.hit_threshold:
                    params = self.get_details(video_id, website_id)
                    if params != False:
                        next_cache_dir = self.get_next_cache_dir()
                        if next_cache_dir is False:
                            return False
                        else:
                            params.update({ 'cur_cache_dir' : next_cache_dir })
                        self.start_cache_thread(video_id, website_id, params)
                        return True
                elif self.is_active(video_id, website_id) == True:
                    self.set_score(video_id, website_id, 0)
                    return False
        except Exception, e:
            error( { 'code' : VIDEO_SCHEDULE_ERR, 'message' : 'Could not find out the next video to schedule.', 'debug' : str(e) } )
            trace( { 'code' : VIDEO_SCHEDULE_ERR, 'message' : traceback.format_exc() } )
            return False
        return False

    # Functions related download scheduling.
    # Have to mess up things in single class because python
    # RPCServer doesn't allow to register multiple instances.
    def add_conn(self, video_id, website_id, thread):
        """Add video_id to active connections list."""
        if video_id not in self.active[website_id]:
            self.active[website_id][video_id] = thread
        return True

    def get_conn_number(self, website_id = None):
        """Return the number of currently active connections."""
        if website_id:
            return len(self.active[website_id])
        else:
            return sum([self.get_conn_number(web_id) for web_id in o.websites])

    def is_active(self, video_id, website_id):
        """Returns whether a connection is active or not."""
        return video_id in self.active[website_id]

    def remove_conn(self, video_id, website_id):
        """Remove video_id from active connections list."""
        if video_id in self.active[website_id]:
            self.active[website_id].pop(video_id)
        return True

class VideoPoolRPCServer(SimpleXMLRPCServer):

    allow_reuse_address = True

    def __init__(self, *args, **kwargs):
        self.finished = False
        SimpleXMLRPCServer.__init__(self, *args, **kwargs)

    def shutdown(self):
        self.finished = True

    def server_bind(self):
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.socket.bind(self.server_address)

    def serve_forever(self):
        while not self.finished:
            self.handle_request()

def cache(params):
    """This function caches the remote file."""
    client_ip = params.get('client_ip', '-')
    video_id = params.get('video_id', '-')
    website_id = params.get('website_id', '-')
    urls = params.get('urls', [])
    try:
        if video_id == '-' or website_id == '-' or len(urls) == 0:
            error( { 'code' : VIDEO_INFO_ERR, 'message' : 'Enough video information was not available in cache thread.', 'website_id' : website_id, 'video_id' : video_id, 'client_ip' : client_ip } )
            return

        for dir in o.base_dirs[website_id]:
            if os.path.isfile(os.path.join(dir, video_id)):
                info({ 'code' : VIDEO_EXISTS, 'message' : 'Video already exists in one of the cache directories.', 'website_id' : website_id, 'video_id' : video_id, 'client_ip' : client_ip })
                return
        eval('cache_' + website_id + '_video(params)')
        return
    except Exception, e:
        error( {'code' : CACHE_THREAD_ERR, 'message' : 'Error in cache thread.', 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip} )
        trace( {'code' : CACHE_THREAD_ERR, 'message' : traceback.format_exc(), 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip} )

def cache_remote_url(remote_url, target_file, params = {}):
    client_ip = params.get('client_ip', '-')
    video_id = params.get('video_id', '-')
    website_id = params.get('website_id', '-')
    headers = params.get('headers', {})
    proxy = params.get('proxy', o.proxy)

    if proxy:
        urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler( { 'http' : proxy, 'https' : proxy, 'ftp' : proxy } )))
    headers.update(o.std_headers)
    request = urllib2.Request(remote_url, None, headers)

    try:
        connection = urllib2.urlopen(request)
        try:
            conn_info = connection.info()
            video_size = int(conn_info.get('content-length', -1))
            if video_size == -1:
                info( { 'code' : VIDEO_SIZE_NOT_SUPPLIED, 'message' : 'Video size was not supplied by the remote server.', 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip } )
            elif o.max_video_size != 0 and o.min_video_size != 0:
                if video_size > o.max_video_size:
                    info( { 'code' : VIDEO_TOO_LARGE, 'message' : 'Video size is large than the specified max video size allowed. Skipping.', 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip } )
                    return False
                if video_size < o.min_video_size:
                    info( { 'code' : VIDEO_TOO_SMALL, 'message' : 'Video size is smaller than the specified min video size allowed. Skipping.', 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip } )
                    return False
        except Exception, e:
            warn( { 'code' : CONNECTION_INFO_ERR, 'message' : 'Error while getting connection information.', 'debug' : str(e), 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip } )
            trace( { 'code' : CONNECTION_INFO_ERR, 'message' : traceback.format_exc(), 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip } )

        file = None
        start_time = time.time()
        downloaded = 0
        while True:
            block = connection.read(16384)
            if len(block) == 0:
                break
            if not file:
                file = open(target_file, 'wb')
            file.write(block)

            downloaded += len(block)
            while o.max_cache_speed > 0 and downloaded / (time.time() - start_time) > o.max_cache_speed:
                time.sleep(0.2)
        if file:
            file.close()

        if video_size != -1 and os.path.getsize(target_file) / 1024 < 0.97 * video_size / 1024:
            error( { 'code' : PARTIAL_CACHE_ERR, 'message' : 'Video could not be cached completely. Expected: ' + str(video_size) + ', Got: ' + str(os.path.getsize(target_file)), 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip } )
            return False
    except urllib2.HTTPError, e:
        try:
            error( { 'code' : CACHE_HTTP_ERR, 'message' : 'HTTP error : ' + str(e.code) + '. An error occured while caching the video at '  + remote_url + '.', 'debug' : str(e), 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip } )
            trace( { 'code' : CACHE_HTTP_ERR, 'message' : traceback.format_exc(), 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip } )
            return False
        except:
            error( { 'code' : CACHE_HTTP_ERR, 'message' : 'HTTP error. An error occured while caching the video at '  + remote_url + '.', 'debug' : str(e), 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip } )
            trace( { 'code' : CACHE_HTTP_ERR, 'message' : traceback.format_exc(), 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip } )
            return False
    except Exception, e:
        error( { 'code' : CACHE_ERR, 'message' : 'Could not cache the video at ' + remote_url + '.', 'debug' : str(e), 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip } )
        trace( { 'code' : CACHE_ERR, 'message' : traceback.format_exc(), 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip } )
        return False
    return True

def cache_youtube_video(params):
    client_ip = params.get('client_ip', '-')
    video_id = params.get('video_id', '-')
    website_id = params.get('website_id', '-')
    format = params.get('format', '')
    urls = params.get('urls', [])
    cur_cache_dir = params.get('cur_cache_dir', None)
    proxy = params.get('proxy', o.proxy)

    if video_id == '-' or website_id == '-' or cur_cache_dir == None or len(urls) == 0:
        error( { 'code' : VIDEO_INFO2_ERR, 'message' : 'Enough video information was not available in cache thread.', 'website_id' : website_id, 'video_id' : video_id, 'client_ip' : client_ip } )
        return

    if proxy:
        urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler( { 'http' : proxy, 'https' : proxy, 'ftp' : proxy } )))
    request = urllib2.Request('http://www.youtube.com/watch?v=%s&gl=US&hl=en' % video_id, None, o.std_headers)

    try:
        webpage = urllib2.urlopen(request).read()
    except Exception, e:
        error( { 'code' : VIDEO_PAGE_ERR, 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip, 'message' : 'Error while fetching video webpage.', 'debug' : str(e) } )
        trace( { 'code' : VIDEO_PAGE_ERR, 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip, 'message' : traceback.format_exc() } )
        return

    for el in ['&el=detailpage', '&el=embedded', '&el=vevo', '']:
        info_url = 'http://www.youtube.com/get_video_info?video_id=%s%s&ps=default&eurl=&gl=US&hl=en' % (video_id, el)
        request = urllib2.Request(info_url, None, o.std_headers)
        try:
            info_page = urllib2.urlopen(request).read()
            video_info = cgi.parse_qs(info_page)
            try:
                view_count = int(video_info.get('view_count', [0])[0])
            except Exception, e:
                view_count = 0
            if view_count < o.min_youtube_views:
                info( { 'code' : VIEW_COUNT_LOW, 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip, 'message' : 'Video has not received enough views and will not be cached.' } )
                return
            if 'url_encoded_fmt_stream_map' in video_info:
                break
        except Exception, e:
            error({'code' : VIDEO_INFO_FETCH_ERR, 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip, 'message' : 'Error occured while fetching video info..', 'debug' : str(e) } )
            trace( { 'code' : VIDEO_INFO_FETCH_ERR, 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip, 'message' : traceback.format_exc() } )
            return

    alternate_vid = None
    video_url = None
    try:
        if 'url_encoded_fmt_stream_map' in video_info:
            url_map = {}
            #FIXME
            #[url_map.update({i['itag'][0] : i['url'][0]}) for i in [cgi.parse_qs(i) for i in filter(lambda x: not re.compile(urllib.quote_plus('video/webm')).search(x), video_info['url_encoded_fmt_stream_map'][0].split(','))]]
            [url_map.update({i['itag'][0] : i['url'][0]}) for i in [cgi.parse_qs(i) for i in video_info['url_encoded_fmt_stream_map'][0].split(',')]]
            alternate_vid = get_youtube_video_id(url_map.values()[0])

            if url_map.has_key(format):
                video_url = url_map[format]
            else:
                for fmt in o.youtube_video_formats:
                    if url_map.has_key(str(fmt)):
                        video_url = url_map[str(fmt)]
                        format = fmt
                        break

            info({ 'code' : format, 'message' : video_url })
    except Exception, e:
        error( { 'code' : ALTERNATE_VIDEO_ID_ERROR, 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip, 'message' : 'Error while extracting alternate video id.', 'debug' : str(e) } )
        trace( { 'code' : ALTERNATE_VIDEO_ID_ERROR, 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip, 'message' : traceback.format_exc() } )


    if not video_url or not alternate_vid:
        error( { 'code' : VIDEO_URL_ERR, 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip, 'message' : 'Could not determine video URL.' } )
        return

    cache_dir = os.path.join(cur_cache_dir, o.website_cache_dir[website_id])
    tmp_dir = os.path.join(cur_cache_dir, o.temp_dir)

    format = get_youtube_file_ext(o, format)
    video_path = os.path.join(cache_dir, alternate_vid) + format
    tmp_path = os.path.join(tmp_dir, alternate_vid) + format

    try:
        if not os.path.exists(video_path):
            if cache_remote_url(video_url, tmp_path, params):
                size = os.path.getsize(tmp_path)
                shutil.move(tmp_path, video_path)
                os.chmod(video_path, o.file_mode)
                os.utime(video_path, None)
                info( { 'code' : VIDEO_CACHED, 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip, 'size' : size, 'message' : 'Video was cached successfully.' } )
            else:
                if os.path.isfile(tmp_path): os.unlink(tmp_path)
                return
        else:
            info({ 'code' : VIDEO_EXISTS, 'message' : 'Video already exists at ' + video_path + '.', 'website_id' : website_id, 'video_id' : video_id, 'client_ip' : client_ip })

        try:
            new_video_path = os.path.join(cache_dir, video_id) + format
            if new_video_path is not None:
                if not os.path.exists(new_video_path):
                    os.link(video_path, new_video_path)
                os.utime(new_video_path, None)
        except Exception, e:
            error( { 'code' : VIDEO_LINK_ERR, 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip, 'message' : 'Could not link video to alternate video id.', 'debug' : str(e) } )
            trace( { 'code' : VIDEO_LINK_ERR, 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip, 'message' : traceback.format_exc() } )
        return
    except Exception, e:
        error( { 'code' : URL_CACHE_ERR, 'message' : 'Failed to cache video at ' + video_url + '.', 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip } )
        trace( { 'code' : URL_CACHE_ERR, 'message' : traceback.format_exc(), 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip } )
    return

def cache_dailymotion_video(params):
    client_ip = params.get('client_ip', '-')
    video_id = params.get('video_id', '-')
    website_id = params.get('website_id', '-')
    format = params.get('format', '')
    urls = params.get('urls', [])
    cur_cache_dir = params.get('cur_cache_dir', None)
    proxy = params.get('proxy', o.proxy)

    if video_id == '-' or website_id == '-' or cur_cache_dir == None or len(urls) == 0:
        error( { 'code' : VIDEO_INFO2_ERR, 'message' : 'Enough video information was not available in cache thread.', 'website_id' : website_id, 'video_id' : video_id, 'client_ip' : client_ip } )
        return

    video_url = None
    alternate_vid = None

    if proxy:
        urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler( { 'http' : proxy, 'https' : proxy, 'ftp' : proxy } )))

    try:
        request = urllib2.Request('http://www.dailymotion.com/family_filter?enable=false', None, o.std_headers)
        urllib2.urlopen(request).read()
    except Exception, e:
        warn( { 'code' : DAILYMOTION_FF_ERR, 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip, 'message' : 'Could not disable family filter for dailymotion.com.', 'debug' : str(e) } )
        trace( { 'code' : DAILYMOTION_FF_ERR, 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip, 'message' : traceback.format_exc() } )

    request = urllib2.Request(urls[0], None, o.std_headers)

    try:
        page_data = urllib2.urlopen(request).read()
        if page_data:
            page_data = urllib2.unquote(page_data).replace('\\/', '/')
            search_sdurl = re.compile('"sdURL":"([^"]*)"').search(page_data)
            if search_sdurl:
                video_url = search_sdurl.group(1)
            else:
                search_hqurl = re.compile('"hqURL":"([^"]*)"').search(page_data)
                if search_hqurl:
                    video_url = search_hqurl.group(1)

        if video_url:
            request = urllib2.Request(video_url, None, o.std_headers)
            webpage = urllib2.urlopen(request)
            if webpage and webpage.url != '':
                path = urlparse.urlsplit(webpage.url)[2]
                alternate_vid = path.strip('/').split('/')[-1]
    except Exception, e:
        error( { 'code' : VIDEO_PAGE_ERR, 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip, 'message' : 'Error while fetching video webpage.', 'debug' : str(e) } )
        trace( { 'code' : VIDEO_PAGE_ERR, 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip, 'message' : traceback.format_exc() } )
        return

    if not video_url:
        error( { 'code' : VIDEO_URL_ERR, 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip, 'message' : 'Could not determine video URL.' } )
        return

    cache_dir = os.path.join(cur_cache_dir, o.website_cache_dir[website_id])
    tmp_dir = os.path.join(cur_cache_dir, o.temp_dir)

    video_path = os.path.join(cache_dir, video_id)
    tmp_path = os.path.join(tmp_dir, video_id)

    try:
        if not os.path.exists(video_path):
            if cache_remote_url(video_url, tmp_path, params):
                size = os.path.getsize(tmp_path)
                shutil.move(tmp_path, video_path)
                os.chmod(video_path, o.file_mode)
                os.utime(video_path, None)
                info( { 'code' : VIDEO_CACHED, 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip, 'size' : size, 'message' : 'Video was cached successfully.' } )
            else:
                if os.path.isfile(tmp_path): os.unlink(tmp_path)
                return
        else:
            info({ 'code' : VIDEO_EXISTS, 'message' : 'Video already exists at ' + video_path + '.', 'website_id' : website_id, 'video_id' : video_id, 'client_ip' : client_ip })

        try:
            new_video_path = os.path.join(cache_dir, alternate_vid)
            if new_video_path is not None:
                if not os.path.exists(new_video_path):
                    os.link(video_path, new_video_path)
                os.utime(new_video_path, None)
        except Exception, e:
            error( { 'code' : VIDEO_LINK_ERR, 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip, 'message' : 'Could not link video to alternate video id.', 'debug' : str(e) } )
            trace( { 'code' : VIDEO_LINK_ERR, 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip, 'message' : traceback.format_exc() } )
        return
    except Exception, e:
        error( { 'code' : URL_CACHE_ERR, 'message' : 'Failed to cache video at ' + video_url + '.', 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip } )
        trace( { 'code' : URL_CACHE_ERR, 'message' : traceback.format_exc(), 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip } )
    return

def cache_megavideo_video(params):
    # The expected mode of the cached file, so that it is readable by apache
    # to stream it to the client.
    client_ip = params.get('client_ip', '-')
    video_id = params.get('video_id', '-')
    website_id = params.get('website_id', '-')
    urls = params.get('urls', [])
    cur_cache_dir = params.get('cur_cache_dir', None)

    if video_id == '-' or website_id == '-' or cur_cache_dir == None or len(urls) == 0:
        error( { 'code' : VIDEO_INFO2_ERR, 'message' : 'Enough video information was not available in cache thread.', 'website_id' : website_id, 'video_id' : video_id, 'client_ip' : client_ip } )
        return

    cache_dir = os.path.join(cur_cache_dir, o.website_cache_dir[website_id])
    tmp_dir = os.path.join(cur_cache_dir, o.temp_dir)

    video_path = os.path.join(cache_dir, video_id)
    tmp_path = os.path.join(tmp_dir, video_id)

    for url in urls:
        original_url = url
        try:
            if not os.path.exists(video_path):
                if cache_remote_url(url, tmp_path, params):
                    size = os.path.getsize(tmp_path)
                    shutil.move(tmp_path, video_path)
                    os.chmod(video_path, o.file_mode)
                    os.utime(video_path, None)
                    info( { 'code' : VIDEO_CACHED, 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip, 'size' : size, 'message' : 'Video was cached successfully. ' + str(size) } )
                    return
                else:
                    if os.path.isfile(tmp_path): os.unlink(tmp_path)
            else:
                info({ 'code' : VIDEO_EXISTS, 'message' : 'Video already exists at ' + video_path + '.', 'website_id' : website_id, 'video_id' : video_id, 'client_ip' : client_ip })
            return
        except Exception, e:
            error( { 'code' : URL_CACHE_ERR, 'message' : 'Failed to cache video at ' + original_url + '.', 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip } )
            trace( { 'code' : URL_CACHE_ERR, 'message' : traceback.format_exc(), 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip } )
    return

def cache_generalized(params):
    # The expected mode of the cached file, so that it is readable by apache
    # to stream it to the client.
    client_ip = params.get('client_ip', '-')
    video_id = params.get('video_id', '-')
    website_id = params.get('website_id', '-')
    urls = params.get('urls', [])
    cur_cache_dir = params.get('cur_cache_dir', None)

    if video_id == '-' or website_id == '-' or cur_cache_dir == None or len(urls) == 0:
        error( { 'code' : VIDEO_INFO2_ERR, 'message' : 'Enough video information was not available in cache thread.', 'website_id' : website_id, 'video_id' : video_id, 'client_ip' : client_ip } )
        return

    cache_dir = os.path.join(cur_cache_dir, o.website_cache_dir[website_id])
    tmp_dir = os.path.join(cur_cache_dir, o.temp_dir)

    video_path = os.path.join(cache_dir, video_id)
    tmp_path = os.path.join(tmp_dir, video_id)

    for url in urls:
        original_url = url
        url = refine_url(url, o.arg_drop_list[website_id])
        try:
            if not os.path.exists(video_path):
                if cache_remote_url(url, tmp_path, params):
                    size = os.path.getsize(tmp_path)
                    shutil.move(tmp_path, video_path)
                    os.chmod(video_path, o.file_mode)
                    os.utime(video_path, None)
                    info( { 'code' : VIDEO_CACHED, 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip, 'size' : size, 'message' : 'Video was cached successfully. ' + str(size) } )
                    return
                else:
                    if os.path.isfile(tmp_path): os.unlink(tmp_path)
            else:
                info({ 'code' : VIDEO_EXISTS, 'message' : 'Video already exists at ' + video_path + '.', 'website_id' : website_id, 'video_id' : video_id, 'client_ip' : client_ip })
            return
        except Exception, e:
            error( { 'code' : URL_CACHE_ERR, 'message' : 'Failed to cache video at ' + original_url + '.', 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip } )
            trace( { 'code' : URL_CACHE_ERR, 'message' : traceback.format_exc(), 'video_id' : video_id, 'website_id' : website_id, 'client_ip' : client_ip } )
    return

cache_aol_video = cache_generalized
cache_bing_video = cache_generalized
cache_bliptv_video = cache_generalized
cache_breakcom_video = cache_generalized
cache_cnn_video = cache_generalized
cache_facebook_video = cache_generalized
cache_metacafe_video = cache_generalized
cache_myspace_video = cache_generalized
cache_vimeo_video = cache_generalized
cache_wrzuta_video = cache_generalized
cache_youku_video = cache_generalized

# Pr0n sites
cache_extremetube_video = cache_generalized
cache_hardsextube_video = cache_generalized
cache_keezmovies_video = cache_generalized
cache_pornhub_video = cache_generalized
cache_redtube_video = cache_generalized
cache_slutload_video = cache_generalized
cache_spankwire_video = cache_generalized
cache_tube8_video = cache_generalized
cache_xhamster_video = cache_generalized
cache_xtube_video = cache_generalized
cache_xvideos_video = cache_generalized
cache_youporn_video = cache_generalized

def refine_cache_periods():
    global cache_periods
    cache_periods = []
    if o.cache_periods == False:
        warn({ 'code' : CACHE_PERIOD_WARN, 'message' : 'Error in parsing the value of the option cache_period. Ignoring. Please set cache_period option in /etc/videocache.conf properly and restart vc-scheduler.'})
        cache_periods = []
    elif o.cache_periods == None:
        cache_periods = []
    else:
        for cp in o.cache_periods:
            if cp['start'][0] > cp['end'][0]:
                warn({ 'code' : CACHE_PERIOD_WARN, 'message' : 'A time period mentioned using cache_period option is not valid. Ignoring. Please set cache_period option in /etc/videocache.conf properly and restart vc-scheduler.', 'debug' : cache_period_h2s(cp)})
            else:
                cache_periods.append(cp)

def is_caching_time():
    if len(cache_periods) == 0:
        return True

    t = time.localtime()
    for cp in cache_periods:
        start_time = int('%02d%02d' % (cp['start'][0], cp['start'][1]))
        end_time = int('%02d%02d' % (cp['end'][0], cp['end'][1]))
        cur_time = int('%02d%02d' % (t.tm_hour, t.tm_min))
        if cur_time >= start_time and cur_time <= end_time:
            return True
    return False

def cache_thread_scheduler():
    if o.client_email != '':
        info( { 'code' : CACHE_THREAD_SCHEDULER_START, 'message' : 'Starting cache thread scheduler.' } )
        refine_cache_periods()
        connection()
        while True:
            try:
                video_pool.load_queue()
                break
            except Exception, e:
                warn({ 'code' : QUEUE_LOAD_WARN, 'message' : 'Error in loading video queue.', 'debug' : str(e)})
                trace({ 'code' : QUEUE_LOAD_WARN, 'message' : traceback.format_exc() })
                time.sleep(5)
                connection()

        while True:
            try:
                num_tries = 0
                while num_tries < 5:
                    try:
                        video_pool.schedule()
                        break
                    except Exception, e:
                        connection()
                    num_tries += 1
                    time.sleep(min(2 ** num_tries, 10))
                else:
                    warn({ 'code' : CACHE_THREAD_SCHEDULE_FAIL, 'message' : 'Could not schedule a cache thread in ' + str(num_tries) + ' tries. Please check RPC server status using vc-scheduler command.' })
            except Exception, e:
                warn({ 'code' : CACHE_THREAD_SCHEDULE_WARN, 'message' : 'Error in scheduling a cache thread. Continuing.', 'debug' : str(e)})
                trace({ 'code' : CACHE_THREAD_SCHEDULE_WARN, 'message' : traceback.format_exc() })
            time.sleep(5)
    else:
        warn( { 'code' : 'RRE_LIAME_TNEILC'[::-1], 'message' : '.reludehcs-cv tratser ,oslA .diuqS tratser/daoler dna noitpo siht teS .tes ton si fnoc.ehcacoediv/cte/ ni liame_tneilc noitpo ehT'[::-1] } )


def submit_system_info():
    time.sleep(20)
    submit_period = 1800
    while True:
        if o.client_email != '':
            num_tries = 0
            systems = []
            while num_tries < 5:
                try:
                    video_pool.ping()
                    systems = video_pool.get_systems()
                    break
                except Exception, e:
                    connection()

                time.sleep(min(2 ** num_tries, 10))
                num_tries += 1

            if len(systems) != 0:
                cookie_handler = urllib2.HTTPCookieProcessor()
                redirect_handler = urllib2.HTTPRedirectHandler()
                info_opener = urllib2.build_opener(redirect_handler, cookie_handler)
                okay = True
                for system in systems:
                    new_info = {}
                    for k,v in system.items():
                        new_info['[server][' + k + ']'] = v

                    status = info_opener.open(o.info_server, urllib.urlencode(new_info)).read()
                    if status != 'OK':
                        okay = False
                if okay:
                    submit_period = 1800
                else:
                    submit_period = 600
        else:
            warn( { 'code' : 'RRE_LIAME_TNEILC'[::-1], 'message' : '.reludehcs-cv tratser ,oslA .diuqS tratser/daoler dna noitpo siht teS .tes ton si fnoc.ehcacoediv/cte/ ni liame_tneilc noitpo ehT'[::-1] } )
            submit_period = 3600

        time.sleep(submit_period)

def start_scheduler_server():
    server = VideoPoolRPCServer((o.rpc_host, int(o.rpc_port)), logRequests=0)
    server.register_function(server.shutdown)
    server.register_introspection_functions()
    server.register_instance(VideoPool())
    info( { 'code' : VIDEO_POOL_SERVER_START, 'message' : 'Starting VideoPool Server at port ' + str(o.rpc_port) + '.' } )
    server.serve_forever()

def scheduler_server_heartbeat():
    while True:
        num_tries = 0
        while num_tries < 5:
            try:
                start_scheduler_server()
            except Exception, e:
                time.sleep(min(2 ** num_tries, 5))
                trace( { 'code' : VIDEO_POOL_SERVER_START_ERR, 'message' : traceback.format_exc() } )

            num_tries += 1
        else:
            error( { 'code' : VIDEO_POOL_SERVER_START_ERR, 'message' : 'Video Pool Server (RPC Server) is crashing time and again. Please check if there any other program listening on port 9100. If so, close/kill that program and then restart vc-scheduler or set rpc_port option in /etc/videocache.conf to a different value.' } )

        time.sleep(30)

class ProcessTransientFile(pyinotify.ProcessEvent):

    def reopen_file(self):
        if os.path.isfile(o.squid_store_log) and is_readable(o.squid_store_log):
            o.ssl_fo = open(o.squid_store_log, 'r')
            return
        o.ssl_fo = None

    def process_IN_MODIFY(self, event):
        pass

    def process_IN_CREATE(self, event):
        self.reopen_file()

    def process_IN_ATTRIB(self, event):
        self.reopen_file()

    def process_default(self, event):
        return

def watch_squid_store_log():
    wm = pyinotify.WatchManager()
    notifier = pyinotify.Notifier(wm)
    wm.watch_transient_file(o.squid_store_log, pyinotify.IN_MODIFY, ProcessTransientFile)
    notifier.loop()

def is_cached(video_url):
    try:
        urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler ({ 'http': o.this_proxy })))
        request = HeadRequest(url = video_url, headers = { 'Cache-Control': 'only-if-cached' })
        if urllib2.urlopen( request ).getcode() == 200:
            return True
    except Exception, e:
        pass
    return False

def watch_file(file, interval = 5):
    file.seek(0, os.SEEK_END)
    while True:
        where = file.tell()
        line = file.readline()
        if not line:
            time.sleep(interval)
            file.seek(where)
        else:
            yield line

def watch_store_log():
    if not o.this_proxy:
        warn({ 'code': LOCAL_PROXY_NOT_SPECIFIED, 'message' : 'No value specified for option this_proxy in /etc/videocache.conf. Videocache will not be able to fetch videos from Squid\'s cache to optimize bandwidth. Please specify a value for this_proxy option and restart vc-scheduler.' })
        return

    if not os.path.isfile(o.squid_store_log):
        warn({ 'code' : STORE_LOG_NOT_FOUND, 'message' : 'Videocache could not locate Squid\'s store.log file. Please set option squid_store_log option correctly in /etc/videocache.conf and restart vc-scheduler.' })
        return

    info({ 'code' : STORE_LOG_WATCH_START, 'message' : 'Watching Squid\'s store.log for videos cached by Squid.' })
    try:
        for line in watch_file(open(o.squid_store_log), 1):
            if line and line.find('SWAPOUT') > 0 and line.find('GET') > 0 and (line.find('video/') > 0 or line.find('audio/') > 0 or line.find('text/plain') > 0 or line.find('flv-application/octet-stream') > 0):
                try:
                    video_url = line.split()[-1]
                    fragments = urlparse.urlsplit(video_url)
                    [host, path, query] = [fragments[1], fragments[2], fragments[3]]
                    dict = cgi.parse_qs(query)

                    matched = False
                    for website in o.websites:
                        if eval('o.enable_' + website + '_cache'):
                            (matched, website_id, video_id, format, search, queue) = eval('check_' + website + '_video(video_url, host, path, query)')
                            if matched:
                                for video_seek_arg in o.arg_drop_list[website_id]:
                                    if video_seek_arg in dict:
                                        matched = False
                                        break
                                break

                    if matched:
                        info({ 'code' : STORE_LOG_URL_HIT, 'message' : 'A URL in squid store log matched.', 'website_id' : website_id, 'video_id' : video_id })
                        if search_cache(o, website_id, video_id, format):
                            info({ 'code' : VIDEO_EXISTS, 'message' : 'Video already exists in one of the cache directories.', 'website_id' : website_id, 'video_id' : video_id })
                        else:
                            if is_cached(video_url):
                                info({ 'code' : 'STORE_LOG_URL_HIT_CONFIRMED' })
                            else:
                                info({ 'code' : 'STORE_LOG_URL_HIT_CONFIRMATION_FAILED' })
                                continue
                            if website_id == 'youtube':
                                format = get_youtube_file_ext(o, format)
                            filename = video_id + format
                            tmp_path = os.path.join(video_pool.get_next_cache_dir(), o.temp_dir, filename)
                            video_path = os.path.join(video_pool.get_next_cache_dir(), o.website_cache_dir[website_id], filename)
                            params = { 'website_id' : website_id, 'video_id' : video_id, 'headers' : {'X-Requested-With' : 'Videocache'}, 'proxy' : o.this_proxy }
                            if cache_remote_url(video_url, tmp_path, params):
                                size = os.path.getsize(tmp_path)
                                shutil.move(tmp_path, video_path)
                                os.chmod(video_path, o.file_mode)
                                os.utime(video_path, None)
                                info({ 'code' : VIDEO_CACHED, 'message' : 'Video fetched from squid disk cache.', 'video_id' : video_id, 'website_id' : website_id, 'size' : size })
                            elif os.path.isfile(tmp_path):
                                os.unlink(tmp_path)
                except Exception, e:
                    error({ 'code' : STORE_LOG_CACHE_ERR, 'message' : 'Error while fetching videos from squid cache.', 'debug' : str(e) })
                    trace({ 'code' : STORE_LOG_CACHE_ERR, 'message' : traceback.format_exc() })
    except Exception, e:
        error({ 'code' : STORE_LOG_READ_ERR, 'message' : 'Error while reading squid store log at ' + o.squid_store_log + ' .', 'debug' : str(e) })
        trace({ 'code' : STORE_LOG_READ_ERR, 'message' : traceback.format_exc() })

def rebuild_cache_dir_filelist(dir, now = False):
    global cache_dir_data

    sort_by = 'time'
    if o.disk_cleanup_strategy == o.CLEANUP_MAX_SIZE: sort_by = 'size'

    if now or (time.time() - cache_dir_data[dir]['last_checked']) > o.cache_dir_filelist_rebuild_interval or len(cache_dir_data[dir]['filelist']) < 1:
        try:
            cleaner_info({ 'code' : FILELIST_BUILD_START, 'message' : 'Obtaining filelist for cache directory ' + dir })
            cache_dir_data[dir] = { 'filelist' : get_filelist(os.path.join(dir, '*', '*'), sort_by, 'asc'), 'last_checked' : time.time() }
            cleaner_info({ 'code' : FILELIST_BUILD_FINISH, 'message' : 'Finished building filelist for cache directory ' + dir })
        except Exception, e:
            cleaner_error({ 'code' : FILELIST_BUILD_ERR, 'message' : 'Error occured while building filelist for cache directory ' + dir, 'debug' : str(e) })
            trace({ 'code' : FILELIST_BUILD_ERR, 'message' : traceback.format_exc() })
            return None
    return True

def purge_videos(dir, num_videos = 25):
    global cache_dir_data

    for i in range(min(num_videos, len(cache_dir_data[dir]['filelist']))):
        try:
            video_path = cache_dir_data[dir]['filelist'].pop()
        except Exception, e:
            cleaner_error({ 'code' : VIDEO_PURGE_WARN, 'message' : 'Error occured while selecting next video to remove from cache directory ' + dir, 'debug' : str(e) })
            trace({ 'code' : VIDEO_PURGE_WARN, 'message' : traceback.format_exc() })
            continue

        try:
            if os.path.isfile(video_path):
                match = re.compile(os.path.join(dir, '([^/]+)/([^/]+)')).search(video_path).groups()
                os.unlink(video_path)
                cleaner_info({ 'code' : VIDEO_PURGED, 'message' : 'Removed from ' + os.path.join(dir, match[0]), 'website_id' : match[0], 'video_id' : match[1] })
        except Exception, e:
            cleaner_error({ 'code' : VIDEO_PURGE_ERR, 'message' : 'Error occured while removing video ' + video_path, 'debug' : str(e) })
            trace({ 'code' : VIDEO_PURGE_ERR, 'message' : traceback.format_exc() })

def cleancache():
    global cache_dir_data

    info({ 'code' : CLEANUP_INITIATED, 'message' : 'Initiating Videocache Cleaner because all cache directories are full.' })
    cleaner_info({ 'code' : CLEANER_START, 'message' : 'Videocache Cleaner invoked to cleanup old/unused videos to make space for the new ones' })
    for dir in o.base_dir_list:
        try:
            if free_space(dir) < o.disk_avail_threshold:
                while True:
                    rebuild_cache_dir_filelist(dir)
                    if len(cache_dir_data[dir]['filelist']) == 0:
                        cleaner_warn({ 'code' : CLEANER_OUT_OF_JUNK, 'message' : 'Videocache Cleaner could not find more files to remove from ' + dir + '. Please check if any other program is consuming your disk space. Or tune your disk_avail_threshold option in /etc/videocache.conf accordingly.' })
                        warn({ 'code' : CLEANER_OUT_OF_JUNK, 'message' : 'Videocache Cleaner could not find more files to remove from ' + dir + '. Please check if any other program is consuming your disk space. Or tune your disk_avail_threshold option in /etc/videocache.conf accordingly.' })
                        break
                    purge_videos(dir)
                    if free_space(dir) > o.disk_avail_threshold + 2000: break
        except Exception, e:
            cleaner_error({ 'code' : CLEANER_ERR, 'message' : 'Error occured while cleaning cache directory ' + dir, 'debug' : str(e) })
            trace({ 'code' : CLEANER_ERR, 'message' : traceback.format_exc() })

    cleaner_info({ 'code' : CLEANER_FINISH, 'message' : 'Videocache Cleaner finished cleaning the old/unused videos and made space for the new ones' })
    info({ 'code' : CLEANUP_COMPLETED, 'message' : 'Done cleaning up cache directories.' })

class VideoPoolDaemon(VideocacheDaemon):

    def __init__(self, o = None, **kwargs):
        self.o = o
        VideocacheDaemon.__init__(self, o.scheduler_pidfile, name = 'Videocache Scheduler', **kwargs)

    def run(self):
        global process_id
        try:
            self.o.set_loggers()
            process_id = os.getpid()

            server_thread = threading.Thread(target = scheduler_server_heartbeat)
            cache_thread = threading.Thread(target = cache_thread_scheduler)
            sysinfo_thread = threading.Thread(target = submit_system_info)
            if o.enable_store_log_monitoring: store_log_watcher_thread = threading.Thread(target = watch_store_log)

            server_thread.start()
            cache_thread.start()
            sysinfo_thread.start()
            if o.enable_store_log_monitoring: store_log_watcher_thread.start()

            server_thread.join()
            cache_thread.join()
            sysinfo_thread.join()
            if o.enable_store_log_monitoring: store_log_watcher_thread.join()
        except Exception, e:
            error( { 'code' : VIDEO_POOL_SERVER_START_ERR, 'message' : 'Error while starting VideoPool server at port ' + str(self.o.rpc_port) + '.' } )
            trace( { 'code' : VIDEO_POOL_SERVER_START_ERR, 'message' : traceback.format_exc() } )

def flush_scheduler_queue():
    running = True
    o.set_loggers()
    connection()
    try:
        video_pool.ping()
    except Exception, e:
        running = False

    if running:
        try:
            video_pool.ping()
            video_pool.flush()
            video_pool.dump_queue(True)
            info({'code' : QUEUE_FLUSH, 'message' : 'Videocache scheduler queue has been flushed. Active connections (if any) will however continue till the videos are cached.'})
            sys.stdout.write('Videocache scheduler queue has been flushed. Active connections (if any) will however continue till the videos are cached.\n')
            sys.exit(0)
        except Exception, e:
            error( { 'code' : QUEUE_FLUSH_ERR, 'message' : 'Error while flushing videocache scheduler queue.', 'debug' : str(e) } )
            trace( { 'code' : QUEUE_FLUSH_ERR, 'message' : traceback.format_exc() } )
            sys.stderr.write('Error while flushing videocache scheduler queue.\n')
            sys.exit(1)
    else:
        removed = True
        for dir in o.base_dir_list:
            queue_file = os.path.join(dir, o.queue_dump_file)
            if os.path.isfile(queue_file):
                try:
                    os.unlink(queue_file)
                except Exception, e:
                    error( { 'code' : QUEUE_FLUSH_ERR, 'message' : 'Error while remove videocache scheduler queue dump file at ' + queue_file + '.', 'debug' : str(e) } )
                    trace( { 'code' : QUEUE_FLUSH_ERR, 'message' : traceback.format_exc() } )
                    sys.stderr.write('Error while remove videocache scheduler queue dump file at ' + queue_file + '.\n')
                    removed = False

        if removed:
            info({'code' : QUEUE_FLUSH, 'message' : 'Videocache scheduler queue has been flushed.'})
            sys.stdout.write('Videocache scheduler queue has been flushed.\n')
            sys.exit(0)
        else:
            error( { 'code' : QUEUE_FLUSH_ERR, 'message' : 'Error while flushing videocache scheduler queue. There might have been a file permission issue.' } )
            sys.stderr.write('Error while flushing videocache scheduler queue. There might have been a file permission issue.\n')
            sys.exit(1)

if __name__ == '__main__':
    # Parse command line options.
    parser = OptionParser()
    parser.add_option('-p', '--prefix', dest = 'vc_root', type='string', help = 'Specify an alternate root location for videocache', default = '/')
    parser.add_option('-c', '--config', dest = 'config_file', type='string', help = 'Use an alternate configuration file', default = '/etc/videocache.conf')
    parser.add_option('-s', '--signal', dest = 'sig', type='string', help = 'Send one of the following signals. start, stop, restart, kill')
    options, args = parser.parse_args()

    if options.sig:
        try:
            o = VideocacheOptions(options.config_file, options.vc_root)
        except Exception, e:
            message = 'Could not load Videocache configuration file. \nDebugging output: \n' + traceback.format_exc()
            syslog_msg(message.replace('\n', ''))
            sys.stderr.write(message)
            sys.exit(1)

        uid = None
        try:
            uid = pwd.getpwnam( o.videocache_user ).pw_uid
        except Exception, e:
            pass
        if uid == None:
            message = 'Could not determine User ID for videocache user ' + o.videocache_user + '. \nDebugging output: \n' + traceback.format_exc()
            syslog_msg(message.replace('\n', ''))
            sys.stderr.write(message)
            sys.exit(1)

        daemon = VideoPoolDaemon(o, uid = uid)

        video_pool = None
        exit = False
        process_id = '-'
        stdout = sys.stdout
        stderr = sys.stderr
        cache_dir_data = {}
        for cache_dir in o.base_dir_list:
            cache_dir_data[cache_dir] = { 'last_checked' : 0, 'filelist' : [] }

        # Import website functions
        for website in o.websites:
            exec('from websites.' + website + ' import *')

        if options.sig == 'start':
            daemon.start()
        elif options.sig == 'stop':
            daemon.stop()
        elif options.sig == 'restart':
            daemon.restart()
        elif options.sig == 'kill':
            daemon.kill()
        elif options.sig == 'status':
            daemon.status()
        elif options.sig == 'flush':
            os.setgid(uid)
            os.setuid(uid)
            flush_scheduler_queue()
        else:
            sys.stderr.write('Unknown signal received. See --help for more options.\n')
    else:
        parser.print_help()
        sys.stderr.write('\nNothing to do. Exit.\n')
        sys.exit(0)


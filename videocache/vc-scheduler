#!/usr/bin/env python
#
# (C) Copyright White Magnet Software Private Limited
# Company Website : http://whitemagnet.com/
# Product Website : http://cachevideos.com/
#

__author__ = """Kulbir Saini <saini@saini.co.in>"""
__docformat__ = 'plaintext'

from common import *
from database import initialize_database, VideoFile, VideoQueue, YoutubeCPN
from fsop import *
from store import *
from vcdaemon import VideocacheDaemon
from vcoptions import VideocacheOptions
from vcsysinfo import get_all_info

from optparse import OptionParser
from Queue import Queue, Empty

import cgi
import cookielib
import glob
import pwd
import random
import signal
import socket
import sys
import threading
import time
import traceback
import urllib2
import urlparse

try:
    import multiprocessing
    from multiprocessing import synchronize
    multiprocessing_enabled = True
except:
    multiprocessing_enabled = False

# Cookie processor and default socket timeout
cj = cookielib.CookieJar()
urllib2.install_opener(urllib2.build_opener(urllib2.HTTPCookieProcessor(cj)))
socket.setdefaulttimeout(90)

# Alias urllib2.open to urllib2.urlopen
urllib2.open = urllib2.urlopen

def info(params = {}):
    if o.enable_scheduler_log and o.vcs_logger:
        params.update({ 'logformat' : o.scheduler_logformat, 'timeformat' : o.timeformat, 'levelname' : LOG_LEVEL_INFO, 'process_id' : process_id })
        o.vcs_logger.info(build_message(params))

def error(params = {}):
    if o.enable_scheduler_log and o.vcs_logger:
        params.update({ 'logformat' : o.scheduler_logformat, 'timeformat' : o.timeformat, 'levelname' : LOG_LEVEL_ERR, 'process_id' : process_id })
        o.vcs_logger.error(build_message(params))

def warn(params = {}):
    if o.enable_scheduler_log and o.vcs_logger:
        params.update({ 'logformat' : o.scheduler_logformat, 'timeformat' : o.timeformat, 'levelname' : LOG_LEVEL_WARN, 'process_id' : process_id })
        o.vcs_logger.debug(build_message(params))

def cleaner_info(params = {}):
    if o.enable_cleaner_log and o.vcc_logger:
        params.update({ 'logformat' : o.cleaner_logformat, 'timeformat' : o.timeformat, 'levelname' : LOG_LEVEL_INFO, 'process_id' : process_id})
        o.vcc_logger.info(build_message(params))

def cleaner_error(params = {}):
    if o.enable_cleaner_log and o.vcc_logger:
        params.update({ 'logformat' : o.cleaner_logformat, 'timeformat' : o.timeformat, 'levelname' : LOG_LEVEL_ERR, 'process_id' : process_id})
        o.vcc_logger.error(build_message(params))

def cleaner_warn(params = {}):
    if o.enable_cleaner_log and o.vcc_logger:
        params.update({ 'logformat' : o.cleaner_logformat, 'timeformat' : o.timeformat, 'levelname' : LOG_LEVEL_WARN, 'process_id' : process_id})
        o.vcc_logger.debug(build_message(params))

def trace(params = {}):
    if o.enable_trace_log and o.trace_logger:
        params.update({ 'logformat' : o.trace_logformat, 'timeformat' : o.timeformat, 'process_id' : process_id })
        o.trace_logger.info(build_message(params))

def ent(params = {}):
    error(params)
    params.update({ 'message' : traceback.format_exc() })
    trace(params)

def cent(params = {}):
    cleaner_error(params)
    params.update({ 'message' : traceback.format_exc() })
    trace(params)

def wnt(params = {}):
    error(params)
    params.update({ 'message' : traceback.format_exc() })
    trace(params)

class LoggingThread(threading.Thread):
    def __init__(self, *args, **kwargs):
        threading.Thread.__init__(self, *args, **kwargs)
        self._real_run = self.run
        self.run = self._wrap_run

    def _wrap_run(self):
        try:
            self._real_run()
        except Exception, e:
            ent({'code' : 'CACHE_THREAD_ERR', 'message' : 'Error in cache thread.', 'debug' : str(e)})

def get_random_user_agent():
    return o.std_headers[random.randint(0, o.num_std_headers - 1)]

def migrate_to_new_youtube_video_ids(website_id, old_video_id, new_video_id):
    if not old_video_id or not new_video_id:
        return
    for youtube_dir in o.base_dirs[website_id]:
        for filename in glob.glob(os.path.join(youtube_dir, old_video_id + '*')):
            try:
                move_file(filename, filename.replace(old_video_id, new_video_id))
            except:
                pass

def cache_remote_url(remote_url, target_file, params = {}):
    try:
        video_id = params.get('video_id', '-')
        website_id = params.get('website_id', '-')
        http_headers = params.get('http_headers', get_random_user_agent())
        proxy = params.get('proxy', o.proxy_server)
        max_cache_speed = params.get('max_cache_speed', o.max_cache_speed)
        min_video_size = params.get('min_video_size', o.min_video_size)
        max_video_size = params.get('max_video_size', o.max_video_size)
        socket_read_block_size = params.get('socket_read_block_size', o.socket_read_block_size)

        if not http_headers.has_key('User-Agent'):
            http_headers.update(get_random_user_agent())

        opener = urllib2
        if proxy:
            opener = urllib2.build_opener(urllib2.ProxyHandler({ 'http' : proxy, 'https' : proxy, 'ftp' : proxy }))

        request = urllib2.Request(remote_url, None, http_headers)

        conn = opener.open(request)
        status = False
        try:
            conn_info = conn.info()
            video_size = int(conn_info.get('content-length', -1))
            if video_size == -1:
                if o.force_video_size == 1:
                    info({ 'code' : 'SIZE_NOT_FOUND', 'message' : 'Video size was not given by web server. Skipping.', 'video_id' : video_id, 'website_id' : website_id })
                    status = True
            else:
                if max_video_size != 0 and video_size > max_video_size:
                    info({ 'code' : 'VIDEO_TOO_LARGE', 'message' : 'Video size is large than the max size allowed. Skipping.', 'video_id' : video_id, 'website_id' : website_id, 'size' : video_size })
                    status = True
                if min_video_size != 0 and video_size < min_video_size:
                    info({ 'code' : 'VIDEO_TOO_SMALL', 'message' : 'Video size is smaller than the min size allowed. Skipping.', 'video_id' : video_id, 'website_id' : website_id, 'size' : video_size })
                    status = True
        except Exception, e:
            wnt({ 'code' : 'CONNECTION_INFO_ERR', 'message' : 'Error while getting connection info.', 'debug' : str(e), 'video_id' : video_id, 'website_id' : website_id })

        if status:
            conn.close()
            return False

        filedesc = None
        start_time = time.time()
        downloaded = 0
        while True:
            block = conn.read(socket_read_block_size)
            if len(block) == 0:
                break
            if not filedesc:
                filedesc = open(target_file, 'wb')
            filedesc.write(block)

            downloaded += len(block)
            while max_cache_speed > 0 and downloaded / (time.time() - start_time) > max_cache_speed:
                time.sleep(0.1)
        if filedesc:
            filedesc.close()
        conn.close()

        target_file_size = os.path.getsize(target_file)
        if video_size != -1 and target_file_size < 0.97 * video_size:
            error({ 'code' : 'PARTIAL_CACHE_ERR', 'message' : 'Video could not be cached completely. Expected: ' + str(video_size) + ', Got: ' + str(target_file_size), 'video_id' : video_id, 'website_id' : website_id })
            remove_file(target_file)
            return False
    except urllib2.HTTPError, e:
        remove_file(target_file)
        try:
            ent({ 'code' : 'CACHE_HTTP_ERR', 'message' : 'HTTP error : ' + str(e.code) + '. An error occured while caching the video at '  + remote_url + '.', 'debug' : str(e), 'video_id' : video_id, 'website_id' : website_id })
            return False
        except:
            ent({ 'code' : 'CACHE_HTTP_ERR', 'message' : 'HTTP error. An error occured while caching the video at '  + remote_url + '.', 'debug' : str(e), 'video_id' : video_id, 'website_id' : website_id })
            return False
    except Exception, e:
        remove_file(target_file)
        ent({ 'code' : 'CACHE_ERR', 'message' : 'Could not cache the video at ' + remote_url + '.', 'debug' : str(e), 'video_id' : video_id, 'website_id' : website_id })
        return False
    return True

def cache_youtube_video(video):
    try:
        video_id, website_id, fmt = video.video_id, video.website_id, video.format
        if not fmt:
            fmt = '34'
        cur_cache_dir = get_next_cache_dir()
        proxy = o.proxy_server
        http_headers = get_random_user_agent()

        if not cur_cache_dir:
            warn({ 'code' : 'VIDEO_INFO_WARN', 'message' : 'Enough video information was not available in cache thread.', 'website_id' : website_id, 'video_id' : video_id })
            video.destroy()
            return

        opener = urllib2
        if proxy:
            opener = urllib2.build_opener(urllib2.ProxyHandler({ 'http' : proxy, 'https' : proxy, 'ftp' : proxy }))

        video_info = None
        for el in ['&el=detailpage', '&el=embedded', '&el=vevo', '']:
            info_url = 'http://www.youtube.com/get_video_info?video_id=%s%s&ps=default&eurl=&gl=US&hl=en' % (video_id, el)
            request = urllib2.Request(info_url, None, http_headers)
            try:
                video_info = cgi.parse_qs(opener.open(request).read())
                try:
                    if int(video_info.get('view_count', [0])[0]) < o.min_youtube_views:
                        info({ 'code' : 'VIEW_COUNT_LOW', 'video_id' : video_id, 'website_id' : website_id, 'message' : 'Video has not received enough views and will not be cached.' })
                        video.destroy()
                        return
                except Exception, e:
                    pass

                if 'url_encoded_fmt_stream_map' in video_info:
                    break
            except Exception, e:
                ent({'code' : 'VIDEO_INFO_FETCH_ERR', 'video_id' : video_id, 'website_id' : website_id, 'message' : 'Error occured while fetching video info from ' + info_url, 'debug' : str(e) })
        else:
            warn({ 'code' : 'VIDEO_INFO_FETCH_WARN', 'video_id' : video_id, 'website_id' : website_id, 'message' : 'Could not fetch required info to cache video. Please report this if it happens very frequently.' })
            video.destroy()
            return

        try:
            url_map = {}
            [url_map.update({i['itag'][0] : i['url'][0] + '&signature=' + i['sig'][0]}) for i in [cgi.parse_qs(i) for i in video_info['url_encoded_fmt_stream_map'][0].split(',')]]
            alternate_vid = get_youtube_video_id(url_map.values()[0])
            if alternate_vid and len(alternate_vid) == 16:
                migrate_to_new_youtube_video_ids(website_id, alternate_vid, video_id)
        except Exception, e:
            ent({ 'code' : 'URL_EXTRACTION_ERROR', 'video_id' : video_id, 'website_id' : website_id, 'message' : 'Error while extracting video urls.', 'debug' : str(e) })
            video.destroy()
            return

        cache_dir = os.path.join(cur_cache_dir, o.website_cache_dir[website_id])
        tmp_dir = os.path.join(cur_cache_dir, o.temp_dir)

        if url_map.has_key(fmt):
            stop = False
            if o.youtube_formats.has_key(fmt) and o.youtube_formats[fmt]['res'] > o.max_youtube_video_quality:
                stop = True
            if not stop and o.enable_youtube_html5_videos == 0 and o.youtube_formats[fmt]['cat'] in ['webm', 'webm_3d']:
                stop = True
            if not stop and o.enable_youtube_3d_videos == 0 and o.youtube_formats[fmt]['cat'] in ['regular_3d', 'webm_3d']:
                stop = True
            if stop:
                video.destroy()
                return

            if youtube_cached_url(o, video_id, website_id, fmt)[0]:
                info({ 'code' : 'VIDEO_EXISTS', 'website_id' : website_id, 'video_id' : video_id, 'message' : 'FORMAT ' + fmt + ' Video already exists.' })
            else:
                video_url = url_map[fmt]
                filename = get_youtube_filename(o, video_id, fmt)
                video_path = os.path.join(cache_dir, filename)
                tmp_path = os.path.join(tmp_dir, filename)

                if cache_remote_url(video_url, tmp_path, {'http_headers' : http_headers, 'video_id' : video_id, 'website_id' : website_id}):
                    size = os.path.getsize(tmp_path)
                    move_file(tmp_path, video_path)
                    os.chmod(video_path, o.file_mode)
                    os.utime(video_path, None)
                    info({ 'code' : 'VIDEO_CACHED', 'video_id' : video_id, 'website_id' : website_id, 'size' : size, 'message' : 'FORMAT ' + fmt + ' Video was cached successfully at ' + video_path })
                    VideoFile.with_timeout(0.5, VideoFile.create, { 'cache_dir' : cur_cache_dir, 'website_id' : website_id, 'filename' : filename, 'size' : size, 'access_time' : current_time() })
        else:
            info({ 'code' : 'UNSUPPORTED_FORMAT', 'video_id' : video_id, 'website_id' : website_id, 'message' : 'Background caching of format ' + str(fmt) + ' is not supported' })
        video.destroy()
    except Exception, e:
        ent({'code' : 'CACHE_THREAD_ERR', 'video_id' : video.video_id, 'website_id' : video.website_id, 'message' : 'Error in cache thread.'})

def cache_generalized(video):
    try:
        video_id, website_id, url = video.video_id, video.website_id, video.url
        cur_cache_dir = get_next_cache_dir()

        if not (url and cur_cache_dir):
            warn({ 'code' : 'VIDEO_INFO_WARN', 'message' : 'Enough video information was not available in cache thread.', 'website_id' : website_id, 'video_id' : video_id })
            video.destroy()
            return

        cache_dir = os.path.join(cur_cache_dir, o.website_cache_dir[website_id])
        tmp_dir = os.path.join(cur_cache_dir, o.temp_dir)
        video_path = os.path.join(cache_dir, video_id)
        tmp_path = os.path.join(tmp_dir, video_id)

        original_url = url
        url = refine_url(url, o.arg_drop_list[website_id])
        try:
            if os.path.exists(video_path):
                info({ 'code' : 'VIDEO_EXISTS', 'message' : 'Video already exists at ' + video_path + '.', 'website_id' : website_id, 'video_id' : video_id })
            else:
                if cache_remote_url(url, tmp_path, {'video_id' : video_id, 'website_id' : website_id}):
                    size = os.path.getsize(tmp_path)
                    move_file(tmp_path, video_path)
                    os.chmod(video_path, o.file_mode)
                    os.utime(video_path, None)
                    info({ 'code' : 'VIDEO_CACHED', 'video_id' : video_id, 'website_id' : website_id, 'size' : size, 'message' : 'Video was cached successfully at ' + video_path })
                    VideoFile.with_timeout(0.5, VideoFile.create, { 'cache_dir' : cur_cache_dir, 'website_id' : website_id, 'filename' : video_id, 'size' : size, 'access_time' : current_time() })
            video.destroy()
        except Exception, e:
            ent({ 'code' : 'URL_CACHE_ERR', 'message' : 'Failed to cache video at ' + original_url + '.', 'video_id' : video_id, 'website_id' : website_id })
    except Exception, e:
        ent({'code' : 'CACHE_THREAD_ERR', 'video_id' : video.video_id, 'website_id' : video.website_id, 'message' : 'Error in cache thread.'})

def cache_android_video(video): pass

def cache_dailymotion_video(video): pass

cache_aol_video = cache_generalized
cache_bing_video = cache_generalized
cache_bliptv_video = cache_generalized
cache_breakcom_video = cache_generalized
cache_facebook_video = cache_generalized
cache_metacafe_video = cache_generalized
cache_myspace_video = cache_generalized
cache_vimeo_video = cache_generalized
cache_vube_video = cache_generalized
cache_wrzuta_video = cache_generalized
cache_youku_video = cache_generalized

# Pr0n sites
cache_extremetube_video = cache_generalized
cache_hardsextube_video = cache_generalized
cache_keezmovies_video = cache_generalized
cache_pornhub_video = cache_generalized
cache_redtube_video = cache_generalized
cache_slutload_video = cache_generalized
cache_spankwire_video = cache_generalized
cache_tube8_video = cache_generalized
cache_xhamster_video = cache_generalized
cache_xtube_video = cache_generalized
cache_xvideos_video = cache_generalized
cache_youporn_video = cache_generalized

def refine_cache_periods():
    global cache_periods
    cache_periods = []
    if o.cache_periods == False:
        warn({ 'code' : 'CACHE_PERIOD_WARN', 'message' : 'Error in parsing the value of the option cache_period. Ignoring. Please set cache_period option in /etc/videocache.conf properly and restart vc-scheduler.'})
        cache_periods = []
    elif o.cache_periods == None:
        cache_periods = []
    else:
        for cp in o.cache_periods:
            if cp['start'][0] > cp['end'][0]:
                warn({ 'code' : 'CACHE_PERIOD_WARN', 'message' : 'A time period mentioned using cache_period option is not valid. Ignoring. Please set cache_period option in /etc/videocache.conf properly and restart vc-scheduler.', 'debug' : cache_period_h2s(cp)})
            else:
                cache_periods.append(cp)

def is_caching_time():
    if len(cache_periods) == 0:
        return True

    t = time.localtime()
    for cp in cache_periods:
        start_time = int('%02d%02d' % (cp['start'][0], cp['start'][1]))
        end_time = int('%02d%02d' % (cp['end'][0], cp['end'][1]))
        cur_time = int('%02d%02d' % (t.tm_hour, t.tm_min))
        if cur_time >= start_time and cur_time <= end_time:
            return True
    return False

def cache(video):
    info({ 'code' : 'CACHE_THREAD_START', 'website_id' : video.website_id, 'video_id' : video.video_id, 'message' : 'Starting cache thread.' })
    eval('cache_' + video.website_id + '_video(video)')
    info({ 'code' : 'CACHE_THREAD_REMOVE', 'website_id' : video.website_id, 'video_id' : video.video_id, 'message' : 'Removed cache thread.' })

def schedule():
    try:
        if o.offline_mode or not is_caching_time(): return
        if VideoQueue.with_timeout(1, VideoQueue.count, { 'active' : True }) >= o.max_cache_processes: return

        video = VideoQueue.with_timeout(0.5, VideoQueue.last, { 'order' : 'access_count', 'cacheable' : True, 'active' : False })
        if not video: return

        if not (video.video_id and video.website_id):
            warn({ 'code' : 'VIDEO_INFO_WARN', 'message' : 'Unable to locate video_id or website_id. Removing from queue. ' + str(video.to_params()) })
            video.destroy()
            return

        if video.access_count < o.hit_threshold: return

        if o.enable_access_log_monitoring:
            cut_off_time = time.time() - o.log_hit_threshold
            if cut_off_time < video.first_access: return

        video.update_attributes({ 'access_count' : 0, 'active' : True, 'activated_at' : time.time() })
        cache_thread = LoggingThread(target = cache, name = str(video.video_id), args = (video,))
        cache_thread.start()
    except Exception, e:
        ent({ 'code' : 'VIDEO_SCHEDULE_ERR', 'message' : 'Could not schedule video for caching.', 'debug' : str(e) })

def cache_thread_scheduler():
    if o.client_email != '':
        schedule()
    else:
        warn({ 'code' : 'RRE_LIAME_TNEILC'[::-1], 'message' : '.reludehcs-cv tratser ,oslA .diuqS tratser/daoler dna noitpo siht teS .tes ton si fnoc.ehcacoediv/cte/ ni liame_tneilc noitpo ehT'[::-1] })

def purge_object(video_url):
    global this_opener
    if not this_opener:
        return False
    try:
        request = PurgeRequest(url = video_url)
        head_conn = this_opener.open(request)
        if 'getcode' in dir(head_conn) and head_conn.getcode() == 200:
            return True
        if 'code' in dir(head_conn) and head_conn.code == 200:
            return True
    except Exception, e:
        pass
    return False

def is_cached(video_url):
    global this_opener
    if not this_opener:
        return False
    try:
        request = HeadRequest(url = video_url, headers = { 'Cache-Control': 'only-if-cached' })
        head_conn = this_opener.open(request)
        if 'getcode' in dir(head_conn) and head_conn.getcode() == 200:
            return True
        if 'code' in dir(head_conn) and head_conn.code == 200:
            return True
    except Exception, e:
        if 'getcode' in dir(e) and e.getcode() == 504:
            return False
        if 'code' in dir(e) and e.code == 504:
            return False
        wnt({ 'code' : 'LOG_CHECK_ERR', 'message' : 'Could not confirm if url cached in Squid ' + video_url, 'debug' : str(e) })
    return False

def arg_drop_exception(website_id, params, arg):
    if website_id == 'hardsextube' and arg == 'start' and params[arg][0] == '0':
        return True
    if website_id == 'dailymotion' and arg == 'seek' and params[arg][0] == '0':
        return True
    if website_id == 'wrzuta' and arg == 'sec-offset' and params[arg][0] == '0':
        return True
    if website_id == 'redtube' and arg == 'ec_seek' and params[arg][0] == '0':
        return True
    if website_id == 'vimeo' and arg == 'aktimeoffset' and params[arg][0] == '0':
        return True
    if website_id == 'aol' and arg in ['set', 'timeoffset', 'aktimeoffset'] and params[arg][0] in ['0', '0.0']:
        return True
    if website_id == 'xtube' and arg in ['start', 'fs', 'ms'] and params[arg][0] in ['0', '0.0']:
        return True
    return False

def extract_pids_from_ps(output):
    results = output.strip().split('\n')
    pids = []
    for result in results:
        match = PID_EXTRACT_REGEX.search(result)
        if match and is_integer(match.group(1)):
            pids.append(int(match.group(1)))
    return pids

def kill_tail_processes(filename, user):
    for pid in extract_pids_from_ps(subprocess.check_output('ps aux | grep %s | grep -v grep | grep "tail -f %s"' % (user, filename), shell = True)):
        try:
            os.kill(pid, signal.SIGTERM)
        except:
            pass

def enqueue_output(output, message_queue, finder_list = [], any_find = True):
    for line in iter(output.readline, ''):
        if finder_list == []:
            shall_queue = True
        else:
            if any_find:
                shall_queue = find_any_in_line(line, finder_list)
            else:
                shall_queue = all(map(lambda x: line.find(x) > -1, finder_list))
        if shall_queue: message_queue.put(line)

def tail_file(filename, finder_list = [], any_find = True):
    message_queue = Queue()
    process = subprocess.Popen(['tail', '-f', filename], stdout = subprocess.PIPE)
    readline_thread = LoggingThread(target = enqueue_output, args = (process.stdout, message_queue, finder_list, any_find))
    readline_thread.start()

    while True:
        try:
            yield message_queue.get(timeout = o.access_log_read_timeout)
        except Empty, e:
            os.kill(process.pid, signal.SIGTERM)
            time.sleep(2)
            process = subprocess.Popen(['tail', '-f', filename], stdout = subprocess.PIPE)
            readline_thread = LoggingThread(target = enqueue_output, args = (process.stdout, message_queue, finder_list, any_find))
            readline_thread.start()
        except Exception, e:
            wnt({ 'code' : 'TAIL_FILE_ERR', 'message' : 'Could not parse message from squid logfile ' + filename + ' Please report if you see this error frequently.', 'debug' : str(e) })
            time.slee(0.05)

def find_any_in_line(line, finder_list):
    for finder in finder_list:
        if finder in line:
            return True
    return False

def watch_access_log():
    info({ 'code' : 'ACCESS_LOG_WATCH_START', 'message' : 'Watching Squid access.log for Youtube video ID extraction.' })

    warning = False
    while True:
        if os.path.isfile(o.squid_access_log):
            if warning: info({ 'code' : 'ACCESS_LOG_FOUND', 'message' : 'Found squid access.log at ' + o.squid_access_log })
            break
        else:
            if warning: warn({ 'code' : 'ACCESS_LOG_NOT_FOUND', 'message' : 'Videocache could not locate Squid access.log file. Please set option squid_access_log option correctly in /etc/videocache.conf and restart vc-scheduler. Will retry after 30 seconds.' })
        warning = True
        time.sleep(30)

    global local_cpn_pool, log_hit_queue
    filename, finder_list, any_find = o.squid_access_log, [ ' GET ' ], True
    access_log_track_lines = [ '.youtube.com/stream_204?', '.youtube.com/ptracking?', '.youtube.com/user_watch?', '.youtube.com/get_video?' ]
    log_hit_track_lines = [ ' video/', ' text/plain', 'application/octet-stream', ' audio/', ' application/vnd.android.package-archive' ]

    started_at = time.time()
    log_hits = 0
    for line in tail_file(filename, finder_list, any_find):
        try:
            if find_any_in_line(line, access_log_track_lines):
                try:
                    url = None
                    for line_part in line.split():
                        if 'http://' in line_part:
                            url = line_part
                            break
                    if not url:
                        continue
                    video_id, cpn = get_youtube_video_id_and_cpn(url)
                    if video_id != None and cpn != None:
                        local_cpn_pool[cpn] = { 'video_id' : video_id, 'last_used' : time.time() }
                        YoutubeCPN.with_timeout(0.25, YoutubeCPN.create, { 'video_id' : video_id, 'cpn' : cpn })
                except Exception, e:
                    ent({ 'code' : 'ACCESS_LOG_PARSE_ERR', 'message' : 'Error while parsing video ids from squid access.log message ' + line, 'debug' : str(e) })
            elif find_any_in_line(line, log_hit_track_lines):
                log_hits += 1
                if log_hit_queue.full():
                    warn({ 'code' : 'LOG_HIT_QUEUE_FULL', 'message' : 'Videocache is receiving ' + str(int(log_hits / (time.time() - started_at))) + ' requests per second for to check against squid cache. Please report if you see this issue.' })
                    log_hit_queue = Queue(o.max_log_hit_monitor_queue_size)
                    log_hits = 0
                log_hit_queue.put(line)
        except Exception, e:
            ent({ 'code' : 'ACCESS_LOG_READ_ERR', 'message' : 'Error while reading squid access.log at ' + o.squid_access_log + ' .', 'debug' : str(e) })
            time.slee(0.05)

def watch_log_hit():
    global local_cpn_pool, log_hit_queue

    local_urls = []
    local_urls_count = 0
    if not o.this_proxy_server:
        warn({ 'code': 'LOCAL_PROXY_NOT_SPECIFIED', 'message' : 'No value specified for option this_proxy in /etc/videocache.conf. Videocache will not be able to fetch videos from Squid cache to optimize bandwidth. Please specify a value for this_proxy option and restart vc-scheduler.' })
        return

    while True:
        if local_urls_count > 500:
            local_urls = local_urls[-50:]
            local_urls_count = len(local_urls)
        try:
            line = log_hit_queue.get(timeout = 120)
            try:
                video_url = None
                for line_part in line.split():
                    if 'http://' in line_part:
                        video_url = line_part
                        break
                if not video_url or video_url in local_urls:
                    continue
                local_urls.append(video_url)
                local_urls_count += 1
                fragments = urlparse.urlsplit(video_url)
                [host, path, query] = [fragments[1], fragments[2], fragments[3]]

                matched = False
                for website in o.websites:
                    if o.enabled_websites[website]:
                        (matched, website_id, video_id, format, search, queue) = eval('check_' + website + '_video(o, video_url, host, path, query)')
                        if matched:
                            args = cgi.parse_qs(query)
                            for video_seek_arg in o.arg_drop_list[website_id]:
                                if video_seek_arg in args and not arg_drop_exception(website_id, args, video_seek_arg):
                                    matched = False
                                    break
                            break

                if not (matched and search):
                    continue

                if website_id == 'youtube':
                    old_video_id = video_id
                    cpn = get_youtube_cpn_from_query(query)
                    if cpn in local_cpn_pool:
                        local_cpn_pool[cpn]['last_used'] = time.time()
                        video_id = local_cpn_pool[cpn]['video_id']

                    if video_id and len(video_id) != 16 and len(video_id) != 11:
                        warn({ 'code' : 'MIGRATION_ISSUE', 'website_id' : website_id, 'message' : 'Youtube migration not fully effective in your country/region yet. Please ignore this issue if it doesnt occur for all the videos.' })
                        video_id = None

                    if old_video_id and video_id:
                        if len(video_id) != 11 and len(old_video_id) == 16:
                            video_id = old_video_id

                    if not video_id and old_video_id and len(old_video_id) == 16:
                        video_id = old_video_id

                if not video_id:
                    warn({ 'code' : 'VIDEO_ID_NOT_FOUND', 'website_id' : website_id, 'message' : 'Most probably you have set strip_query_terms to on in your squid.conf. Please set it to off and restart squid and vc-scheduler.' })
                    continue

                expected_size = None
                if website_id == 'youtube':
                    youtube_range = get_youtube_video_range_from_query(query)
                    expected_size = youtube_range['end'] - youtube_range['start']
                    filename = get_youtube_filename(o, video_id, format, youtube_range)
                else:
                    filename = eval('get_' + website_id + '_filename(o, video_id, format)')

                cached = False
                for directory in o.base_dirs[website_id]:
                    if os.path.isfile(os.path.join(directory, filename)):
                        cached = True
                        break

                if cached:
                    continue

                if is_cached(video_url):
                    info({ 'code' : 'LOG_HIT_CONFIRMED', 'video_id' : video_id, 'website_id' : website_id, 'message' : 'The video is present in local squid cache' })
                else:
                    info({ 'code' : 'LOG_HIT_CONFIRM_FAILED', 'video_id' : video_id, 'website_id' : website_id, 'message' : 'Either video is not present in squid cache anymore or the connection was closed before video buffer could complete.' })
                    continue

                cache_dir = get_next_cache_dir()
                if cache_dir == False:
                    continue

                tmp_path = os.path.join(cache_dir, o.temp_dir, filename)
                video_path = os.path.join(cache_dir, o.website_cache_dir[website_id], filename)
                params = { 'website_id' : website_id, 'video_id' : video_id, 'http_headers' : {'X-Requested-With' : 'Videocache'}, 'proxy' : o.this_proxy_server, 'max_cache_speed' : 0, 'socket_read_block_size' : 2097152 }
                if website_id == 'android':
                    params.update({ 'min_video_size' : o.min_android_app_size, 'max_video_size' : o.max_android_app_size })
                if timeout_exec(5, cache_remote_url, False, video_url, tmp_path, params):
                    size = os.path.getsize(tmp_path)
                    if expected_size > 1024 and abs(expected_size - size) > 1024:
                        os.unlink(tmp_path)
                        info({ 'code' : 'CORRUPT_CACHE', 'video_id' : video_id, 'website_id' : website_id, 'size' : size, 'message' : 'Most probably client closed connection before complete buffer. Filename : ' + filename + ' Expected : ' + str(expected_size) + ' Received : ' + str(size) })
                        purge_object(video_url)
                    else:
                        move_file(tmp_path, video_path)
                        os.chmod(video_path, o.file_mode)
                        os.utime(video_path, None)
                        VideoFile.with_timeout(1, VideoFile.create, { 'cache_dir' : cache_dir, 'website_id' : website_id, 'filename' : filename, 'size' : size, 'access_time' : current_time() })
                        info({ 'code' : 'VIDEO_CACHED', 'video_id' : video_id, 'website_id' : website_id, 'size' : size, 'message' : 'Video fetched from squid disk cache and stored at ' + video_path })
            except Exception, e:
                ent({ 'code' : 'LOG_CACHE_ERR', 'message' : 'Error while fetching videos from squid cache.', 'debug' : str(e) })
        except Empty, e:
            pass
        except Exception, e:
            ent({ 'code' : 'LOG_READ_ERR', 'message' : 'Error during reading message from log queue.', 'debug' : str(e) })
            time.slee(0.05)

def update_disk_space():
    global base_dir_disk_space, cleanup_cache_needed
    for cache_dir in o.base_dir_list:
        space_available = free_space(cache_dir)
        space_used = partition_used(cache_dir)
        base_dir_disk_space[cache_dir] = { 'free_space' : space_available, 'use' : True }
        if space_used >= o.base_dir_thresholds[cache_dir]['high']:
            base_dir_disk_space[cache_dir].update({ 'use' : False })
            cleanup_cache_needed = True

def get_next_cache_dir():
    global last_base_dir_used, last_disk_space_update_at, disk_space_update_interval, sorted_disk_space, last_cache_dir_warn_at, cache_dir_warn_interval
    now = time.time()
    if now - last_disk_space_update_at > disk_space_update_interval:
        last_disk_space_update_at = now
        update_disk_space()
        if o.base_dir_selection == 3:
            vk = [(v['free_space'], k) for k, v in base_dir_disk_space.items()]
            sorted_disk_space = sorted(vk, reverse = True)
    if o.base_dir_selection == 1:
        for cache_dir in o.base_dir_list:
            if base_dir_disk_space[cache_dir]['use']:
                return cache_dir
    elif o.base_dir_selection == 2:
        for cache_dir in o.base_dir_list[(last_base_dir_used + 1):] + o.base_dir_list[:(last_base_dir_used + 1)]:
            if base_dir_disk_space[cache_dir]['use']:
                last_base_dir_used = o.base_dir_list.index(cache_dir)
                return cache_dir
    elif o.base_dir_selection == 3:
        for v, cache_dir in sorted_disk_space:
            if base_dir_disk_space[cache_dir]['use']:
                last_base_dir_used = o.base_dir_list.index(cache_dir)
                return cache_dir

    if now - last_cache_dir_warn_at > cache_dir_warn_interval:
        last_cache_dir_warn_at = now
        warn({'code' : 'CACHE_DIR_FULL', 'message' : 'All your cache directories have reached the disk availability threshold.'})
    return False

def need_rest_for():
    rest_for = 0.5
    try:
        load = os.getloadavg()[1]
        if load > 4.5:
            rest_for = 5
        elif load > 2.5:
            rest_for = 2
        else:
            rest_for = 0.1
    except Exception, e:
        pass
    return rest_for

def submit_system_info():
    try:
        if o.client_email != '':
            sys_info = { 'id' : o.id, 'email' : eval('o.cl' + 'ie' + 'nt_' + 'em' + 'ail'), 'version' : o.version, 'revision' : o.revision, 'trial' : o.trial }
            sys_info.update(get_all_info(o))
            new_info = {}
            for k,v in sys_info.items():
                new_info['[server][' + k + ']'] = v

            cookie_handler = urllib2.HTTPCookieProcessor()
            redirect_handler = urllib2.HTTPRedirectHandler()
            info_opener = urllib2.build_opener(redirect_handler, cookie_handler)

            status = info_opener.open(o.info_server, urllib.urlencode(new_info)).read()
        else:
            warn({ 'code' : 'RRE_LIAME_TNEILC'[::-1], 'message' : '.reludehcs-cv tratser ,oslA .diuqS tratser/daoler dna noitpo siht teS .tes ton si fnoc.ehcacoediv/cte/ ni liame_tneilc noitpo ehT'[::-1] })
    except Exception, e:
        wnt({ 'code' : 'SYNC_WARN', 'message' : 'Please report this if it occurs frequently.', 'debug' : str(e) })

def remove_file_entries_from_db(cache_dir, website_id, files_to_remove):
    for files_to_remove_chunk in chunks(files_to_remove, 25):
        try:
            VideoFile.with_timeout(1, VideoFile.destroy_by, { 'cache_dir' : cache_dir, 'website_id' : website_id, 'filename' : files_to_remove_chunk })
        except Exception, e:
            ent({ 'code' : 'FILEDB_ERR', 'website_id' : website_id, 'message' : 'Error while removing entries from database for cache_dir : ' + cache_dir, 'debug' : str(e) })
        time.sleep(need_rest_for())

def add_file_entries_to_db(cache_dir, website_id, files_to_create):
    query_prefix = 'INSERT IGNORE INTO %s (cache_dir,website_id,filename,size,access_time) VALUES ' % VideoFile.table_name
    query_prefix2 = "('" + cache_dir + "','" + website_id + "','%s', '%s', '%s')"

    for filenames in chunks(files_to_create, 25):
        queries = []
        for filename in filenames:
            stats = os.stat(filename)
            queries.append(query_prefix2 % (filename, stats.st_size, time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(stats.st_atime))))
        try:
            VideoFile.with_timeout(1, VideoFile.execute, query_prefix + ','.join(queries))
        except Exception, e:
            ent({ 'code' : 'FILEDB_ERR', 'website_id' : website_id, 'message' : 'Error while adding file entries to database for cache_dir : ' + cache_dir, 'debug' : str(e) })
        time.sleep(need_rest_for())

def update_file_entries_in_db(cache_dir, website_id, files_to_update):
    query_prefix = 'UPDATE %s SET ' % VideoFile.table_name
    query_prefix2 = ' size = %d, access_time = "%s" WHERE '
    query_suffix = ' cache_dir = "%s" AND website_id = "%s" ' % (cache_dir, website_id )
    query_suffix2 = ' AND filename = "%s"; '

    for filenames in chunks(files_to_update, 25):
        for filename in filenames:
            stats = os.stat(filename)
            query = query_prefix + query_prefix2 % (stats.st_size, time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(stats.st_atime))) + query_suffix + query_suffix2 % filename
            try:
                VideoFile.with_timeout(1, VideoFile.execute, query)
            except Exception, e:
                ent({ 'code' : 'FILEDB_ERR', 'website_id' : website_id, 'message' : 'Error while update file entry in database for cache_dir : ' + cache_dir, 'debug' : str(e) })
        time.sleep(need_rest_for())

def rebuild_filelist_for(cache_dir, website_id, cur_dir):
    cache_dir = cache_dir.rstrip('/')
    letters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_#='
    sql_map = { '_' : '\_' }
    os.chdir(cur_dir)
    total_files_updated = 0
    for l_1 in letters:
        try:
            count, results = VideoFile.with_timeout(3, VideoFile.execute, 'SELECT id, filename, size FROM %s WHERE cache_dir = "%s" AND website_id = "%s" AND BINARY filename LIKE "%s%%";' % (VideoFile.table_name, cache_dir, website_id, sql_map.get(l_1, l_1)))
        except:
            results = []
        files_on_os = set(glob.glob(l_1 + '*'))
        files_in_db = set(map(lambda x: x[1], results))

        files_to_remove = files_in_db - files_on_os
        remove_file_entries_from_db(cache_dir, website_id, list(files_to_remove))

        files_to_create = files_on_os - files_in_db
        add_file_entries_to_db(cache_dir, website_id, list(files_to_create))

        files_to_update = list(set(map(lambda x: x[1], filter(lambda x: x[2] == 0, results))) - files_to_remove)
        update_file_entries_in_db(cache_dir, website_id, files_to_update)

        total_files_updated += len(files_to_create) + len(files_to_update)
        time.sleep(need_rest_for() / 4.0)
    return total_files_updated

def remove_rouge_db_entries(cache_dir):
    try:
        while True:
            count, results = VideoFile.with_timeout(1, VideoFile.execute, 'DELETE FROM %s WHERE cache_dir = "%s" LIMIT 25;' % (VideoFile.table_name, os.path.join(cache_dir, '')))
            if count < 25:
                return
            time.sleep(need_rest_for())
    except Exception, e:
        pass

def rebuild_filelist():
    try:
        for cache_dir in o.base_dir_list:
            cache_dir = cache_dir.rstrip('/')
            remove_rouge_db_entries(cache_dir)
            for website_id in o.websites:
                cur_dir = os.path.join(cache_dir, o.website_cache_dir[website_id])
                if not os.path.isdir(cur_dir):
                    continue
                try:
                    started_at = time.time()
                    total_files_updated = rebuild_filelist_for(cache_dir, website_id, cur_dir)
                    info({ 'code' : 'FILELIST_BUILD_FINISH', 'website_id' : website_id, 'message' : 'Updated ' + str(total_files_updated) + ' files in ' + str(int(time.time() - started_at)) + ' seconds for cache_dir : ' + cache_dir })
                    time.sleep(need_rest_for())
                except Exception, e:
                    ent({ 'code' : 'FILELIST_BUILD_FAIL', 'website_id' : website_id, 'message' : 'Failed to build filelist for cache_dir : ' + cache_dir, 'debug' : str(e) })
    except Exception, e:
        ent({ 'code' : 'FILELIST_BUILD_FAIL', 'website_id' : website_id, 'message' : 'Failed to build filelist', 'debug' : str(e) })

def flush_video_queue():
    try:
        while True:
            count, results = VideoQueue.with_timeout(1, VideoQueue.execute, 'DELETE FROM %s LIMIT 25;' % VideoQueue.table_name)
            if count < 25:
                break
            time.sleep(need_rest_for())
        print 'Videocache scheduler queue has been flushed. Active connections (if any) will however continue till the videos are cached.'
    except Exception, e:
        print 'Error occured while flushing scheduler queue.', str(e)
        print traceback.format_exc()
    for cache_dir in o.base_dir_list:
        queue_file = os.path.join(cache_dir, o.queue_dump_file)
        if os.path.isfile(queue_file):
            try:
                os.unlink(queue_file)
            except Exception, e:
                pass

def cleanup_video():
    try:
        delete_video(o, randomize)
    except Exception, e:
        wnt({ 'code' : 'SYNC_WARN', 'message' : 'Please report this if it occurs frequently.', 'debug' : str(e) })

def cleanup_cache(from_command_line = False):
    global cleanup_cache_needed
    cleaner_info({ 'code' : 'CLEANER_START', 'message' : 'Videocache Cleaner invoked to cleanup old/unused videos to make space for the new ones' })
    if from_command_line:
        print 'Videocache Cleaner invoked to cleanup old/unused videos to make space for the new ones'
    delete_query = 'DELETE FROM %s WHERE id IN ' % VideoFile.table_name

    for cache_dir in o.base_dir_list:
        query = 'SELECT id, website_id, filename FROM %s WHERE cache_dir = "%s" ORDER BY %s LIMIT 100' % (VideoFile.table_name, cache_dir.rstrip('/'), o.cleanup_order)
        try:
            if partition_used(cache_dir) > o.base_dir_thresholds[cache_dir]['low']:
                while True:
                    count, results = VideoFile.with_timeout(4, VideoFile.execute, query)
                    if len(results) < 5:
                        cleaner_warn({ 'code' : 'CLEANER_OUT_OF_JUNK', 'message' : 'Videocache Cleaner could not find more files to remove from ' + cache_dir + '. Please check if any other program is consuming your disk space. Or tune your cache_swap_low and cache_swap_high options in /etc/videocache.conf accordingly.' })
                        if from_command_line:
                            print 'Videocache Cleaner could not find more files to remove from ' + cache_dir + '. Please check if any other program is consuming your disk space. Or tune your cache_swap_low and cache_swap_high options in /etc/videocache.conf accordingly.'
                        warn({ 'code' : 'CLEANER_OUT_OF_JUNK', 'message' : 'Videocache Cleaner could not find more files to remove from ' + cache_dir + '. Please check if any other program is consuming your disk space. Or tune your cache_swap_low and cache_swap_high options in /etc/videocache.conf accordingly.' })
                        break
                    for chunked_results in chunks(results, 25):
                        delete_ids = []
                        for result in chunked_results:
                            delete_ids += [result[0]]
                            website_id, filename = result[1], result[2]
                            filepath = os.path.join(cache_dir, o.website_cache_dir[website_id], filename)
                            if os.path.isfile(filepath):
                                os.unlink(filepath)
                                cleaner_info({ 'code' : 'VIDEO_PURGED', 'message' : 'Removed ' + filepath, 'website_id' : website_id, 'video_id' : filename })
                        try:
                            VideoFile.with_timeout(1, VideoFile.destroy_by, { 'id' : delete_ids })
                        except Exception, e:
                            ent({ 'code' : 'FILE_DELETE_ERR', 'website_id' : website_id, 'message' : 'Error in deleting videos from database ' + str(delete_ids), 'debug' : str(e) })
                            if from_command_line:
                                print 'Error in deleting videos from database ' + str(delete_ids), str(e)
                                print traceback.format_exc()
                        time.sleep(need_rest_for())
                    if partition_used(cache_dir) < o.base_dir_thresholds[cache_dir]['low']: break
        except Exception, e:
            cent({ 'code' : 'CLEANER_ERR', 'message' : 'Error occured while cleaning cache directory ' + cache_dir, 'debug' : str(e) })
            if from_command_line:
                print 'Error occured while cleaning cache directory ' + cache_dir, str(e)
                print traceback.format_exc()
    cleanup_cache_needed = False
    cleaner_info({ 'code' : 'CLEANER_FINISH', 'message' : 'Videocache Cleaner finished cleaning the old/unused videos and made space for the new ones' })
    if from_command_line:
        print 'Videocache Cleaner finished cleaning the old/unused videos and made space for the new ones'
    else:
        update_disk_space()

def cleanup_video_queue():
    cut_off_time = time.time() - o.video_queue_lifetime
    active_cut_off_time = time.time() - o.active_queue_lifetime
    try:
        while True:
            count, r = VideoQueue.with_timeout(1, VideoQueue.execute, 'DELETE FROM %s WHERE access_time < "%s" OR (access_count = 0 AND active = 0 AND (activated_at IS NULL OR activated_at < "%s")) LIMIT 25;' % (VideoQueue.table_name, timestamp_to_datetime(cut_off_time), timestamp_to_datetime(active_cut_off_time)))
            if count < 25:
                break
            time.sleep(need_rest_for())
    except Exception, e:
        wnt({ 'code' : 'CLEANUP_WARN', 'message' : 'Ignore this warning if it occurs rarely. Please report if you see this message very frequently.', 'debug' : str(e) })

    try:
        while True:
            count, r = VideoQueue.with_timeout(1, VideoQueue.execute, 'UPDATE %s SET active = %d, activated_at = NULL WHERE active = %d AND (activated_at IS NULL OR activated_at < "%s") LIMIT 25;' % (VideoQueue.table_name, False, True, timestamp_to_datetime(active_cut_off_time)))
            if count < 25:
                break
            time.sleep(need_rest_for())
    except Exception, e:
        wnt({ 'code' : 'CLEANUP_WARN', 'message' : 'Ignore this warning if it occurs rarely. Please report if you see this message very frequently.', 'debug' : str(e) })

def cleanup_cpn_pool():
    global local_cpn_pool
    cut_off_time = time.time() - o.cpn_lifetime
    for cpn_id in local_cpn_pool.keys():
        try:
            if cut_off_time > local_cpn_pool[cpn_id]['last_used']:
                local_cpn_pool.pop(cpn_id, None)
        except:
            pass
    try:
        while True:
            count, results = YoutubeCPN.with_timeout(1, YoutubeCPN.execute, 'DELETE FROM %s WHERE access_time < "%s" LIMIT 25;' % (YoutubeCPN.table_name, timestamp_to_datetime(cut_off_time)))
            if count < 25:
                break
            time.sleep(need_rest_for())
    except Exception, e:
        wnt({ 'code' : 'CLEANUP_WARN', 'message' : 'Ignore this warning if it occurs rarely. Please report if you see this message very frequently.', 'debug' : str(e) })

def write_pid_file(pids):
    try:
        fobject = open(o.pidfile_path, 'w')
        fobject.write(','.join(map(lambda x: str(x), pids)))
        fobject.close()
    except Exception, e:
        wnt({ 'code' : 'PIDFILE_WRITE_WARN', 'message' : 'Please check if ' + o.pidfile_path + ' is writable by Squid daemon user.', 'debug' : str(e) })

def thread_starter(thread, func, cur_time, last_run_at, run_interval):
    try:
        if thread and thread.is_alive():
            return thread, last_run_at
        elif cur_time - last_run_at > run_interval:
            thread = LoggingThread(target = func, name = func.__name__)
            thread.start()
            return thread, cur_time
    except Exception, e:
        wnt({ 'code' : 'TASK_SCHEDULE_WARN', 'message' : 'Error in scheduling a task. Please report is this occurs frequently.', 'debug' : str(e) })
    return False, last_run_at

def multiprocess_starter(thread, func, cur_time, last_run_at, run_interval, process_list):
    try:
        if thread:
            if thread.is_alive():
                return thread, last_run_at
            elif multiprocessing_enabled:
                if thread.pid in process_list:
                    process_list.remove(thread.pid)

        if not (thread and thread.is_alive()) and cur_time - last_run_at > run_interval:
            if multiprocessing_enabled:
                thread = multiprocessing.Process(target = func, name = func.__name__)
            else:
                thread = LoggingThread(target = func, name = func.__name__)
            thread.start()
            if multiprocessing_enabled and thread.pid not in process_list:
                process_list.append(thread.pid)
            return thread, cur_time
    except Exception, e:
        wnt({ 'code' : 'TASK_SCHEDULE_WARN', 'message' : 'Error in scheduling a task. Please report is this occurs frequently.', 'debug' : str(e) })
    return False, last_run_at

def task_scheduler():
    global cleanup_cache_needed
    process_list = []
    write_pid_file(process_list)
    now = time.time()
    refine_cache_periods()

    # cache_thread_scheduler
    last_cts_at, cts_thread, cts_interval = 0, None, 15

    # cleanup_cpn_pool
    last_ccp_at, ccp_thread, ccp_interval = 0, None, 120

    # cleanup_video_queue
    last_cvq_at, cvq_thread, cvq_interval = now - 570, None, 600

    # cleanup_cache
    last_cc_at, cc_thread, cc_interval = now - 220, None, 300

    # rebuild_filelist
    last_rf_at, rf_thread, rf_interval = now - (o.filelist_rebuild_interval - 50), None, o.filelist_rebuild_interval

    # submit_system_info
    last_ssi_at, ssi_thread, ssi_interval = now - 21500, None, 21600

    # cleanup_video
    last_cv_at, cv_thread, cv_interval = now - 1770, None, 1800

    # cpn_monitor
    last_cm_at, cm_thread, cm_interval = now - 55, None, 60

    # log_hit_monitor
    last_hm_at, hm_thread, hm_interval = now - 165, None, 170

    while True:
        cur_time = time.time()
        write_pid_file(process_list)
        cts_thread, last_cts_at = thread_starter(cts_thread, cache_thread_scheduler, cur_time, last_cts_at, cts_interval)
        ccp_thread, last_ccp_at = thread_starter(ccp_thread, cleanup_cpn_pool, cur_time, last_ccp_at, ccp_interval)
        cvq_thread, last_cvq_at = thread_starter(cvq_thread, cleanup_video_queue, cur_time, last_cvq_at, cvq_interval)
        if cleanup_cache_needed:
            cc_thread, last_cc_at = thread_starter(cc_thread, cleanup_cache, cur_time, last_cc_at, cc_interval)
        ssi_thread, last_ssi_at = thread_starter(ssi_thread, submit_system_info, cur_time, last_ssi_at, ssi_interval)
        cv_thread, last_cv_at = thread_starter(cv_thread, cleanup_video, cur_time, last_cv_at, cv_interval)
        if not o.offline_mode and o.enable_access_log_monitoring:
            cm_thread, last_cm_at = thread_starter(cm_thread, watch_access_log, cur_time, last_cm_at, cm_interval)
            hm_thread, last_hm_at = thread_starter(hm_thread, watch_log_hit, cur_time, last_hm_at, hm_interval)
        rf_thread, last_rf_at = multiprocess_starter(rf_thread, rebuild_filelist, cur_time, last_rf_at, rf_interval, process_list)
        time.sleep(2)

class VideoPoolDaemon(VideocacheDaemon):

    def __init__(self, o = None, **kwargs):
        self.o = o
        VideocacheDaemon.__init__(self, '/var/run/videocache.pid', name = 'Videocache Scheduler', **kwargs)

    def run(self):
        global process_id
        try:
            self.o.set_loggers()
            process_id = os.getpid()

            if not o.enable_access_log_monitoring:
                info({ 'code': 'ACCESS_LOG_NOT_MONITORED', 'message' : 'Scheduler will not monitor Squid access.log because enable_access_log_monitoring is set to 0 in /etc/videocache.conf.' })

            if o.offline_mode:
                info({ 'code': 'ACCESS_LOG_NOT_MONITORED', 'message' : 'Scheduler will not monitor Squid access.log because Videocache is in offline mode. Check videocache.conf for offline_mode option.' })

            task_scheduler()
        except Exception, e:
            ent({ 'code' : 'TASK_SCHEDULER_ERR', 'message' : 'Error while starting task scheduler.' })

def cleanup_processes():
    try:
        kill_tail_processes(o.squid_access_log, o.videocache_user)
    except:
        pass
    try:
        for pid in map(lambda x: int(x), filter(lambda x: is_integer(x), open(o.pidfile_path, 'r').read().strip().split(','))):
            try:
                os.kill(pid, signal.SIGTERM)
            except:
                pass
    except:
        pass
    try:
        os.unlink(o.pidfile_path)
    except:
        pass

if __name__ == '__main__':
    # Parse command line options.
    parser = OptionParser()
    parser.add_option('-s', '--signal', dest = 'sig', type='string', help = 'Send one of the following signals. start, stop, restart, kill')
    options, args = parser.parse_args()

    if options.sig:
        try:
            o = VideocacheOptions('/etc/videocache.conf', True)
        except Exception, e:
            message = 'Could not load Videocache configuration file. \nDebugging output: \n' + traceback.format_exc()
            syslog_msg(message.replace('\n', ''))
            sys.stderr.write(message)
            sys.exit(1)

        uid = None
        try:
            uid = pwd.getpwnam(o.videocache_user).pw_uid
        except Exception, e:
            pass
        if uid == None:
            message = 'Could not determine User ID for videocache user ' + o.videocache_user + '. \nDebugging output: \n' + traceback.format_exc()
            syslog_msg(message.replace('\n', ''))
            sys.stderr.write(message)
            sys.exit(1)

        daemon = VideoPoolDaemon(o, uid = uid)

        log_hit_queue = Queue(o.max_log_hit_monitor_queue_size)
        base_dir_disk_space = {}
        last_base_dir_used = 0
        last_disk_space_update_at = 0
        disk_space_update_interval = 120
        cleanup_cache_needed = False
        sorted_disk_space = None
        last_cache_dir_warn_at = 0
        cache_dir_warn_interval = 60
        local_cpn_pool = {}
        exit = False
        process_id = '-'
        stdout = sys.stdout
        stderr = sys.stderr
        this_opener = None
        if o.this_proxy_server:
            this_opener = urllib2.build_opener(urllib2.ProxyHandler ({ 'http': o.this_proxy_server }))

        # Compiled regexes
        PID_EXTRACT_REGEX = re.compile('^[^\ ]+[ ]+([0-9]+)')

        try:
            import ctypes
            from ctypes.util import find_library
            libc = ctypes.CDLL(find_library('c'))
            libc.srand(int(random.random() * 10**8))
            randomize = libc.rand()
        except Exception, e:
            randomize = int(random.random() * 10**8)

        # Import website functions
        for website_id in o.websites:
            exec(website_id + '_cached_url = generalized_cached_url')
            exec('get_' + website_id + '_filename = get_generalized_filename')
            exec('from websites.' + website_id + ' import *')

        initialize_database(o)
        if options.sig in ['flush', 'clean']:
            os.setgid(uid)
            os.setuid(uid)

        if options.sig == 'start':
            daemon.start()
        elif options.sig == 'stop':
            cleanup_processes()
            daemon.stop()
        elif options.sig == 'restart':
            cleanup_processes()
            daemon.restart()
        elif options.sig == 'status':
            daemon.status()
        elif options.sig == 'flush':
            flush_video_queue()
        elif options.sig == 'clean':
            cleanup_cache(True)
        else:
            sys.stderr.write('Unknown signal received. See --help for more options.\n')
    else:
        parser.print_help()
        sys.stderr.write('\nNothing to do. Exit.\n')
        sys.exit(0)


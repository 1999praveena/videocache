#!/usr/bin/env python
#
# (C) Copyright White Magnet Software Private Limited
# Company Website : http://whitemagnet.com/
# Product Website : http://cachevideos.com/
#

__author__ = """Kulbir Saini <saini@saini.co.in>"""
__docformat__ = 'plaintext'

from optparse import OptionParser

import logging
import os
import pwd
import stat
import sys
import syslog

def info(params = {}):
    if o.enable_cleaner_log:
        params.update({ 'logformat' : o.cleaner_logformat, 'timeformat' : o.timeformat, 'levelname' : logging.getLevelName(logging.INFO), 'process_id' : process_id})
        o.vcc_logger.info(build_message(params))

def error(params = {}):
    if o.enable_cleaner_log:
        params.update({ 'logformat' : o.cleaner_logformat, 'timeformat' : o.timeformat, 'levelname' : logging.getLevelName(logging.ERROR), 'process_id' : process_id})
        o.vcc_logger.error(build_message(params))

def warn(params = {}):
    if o.enable_cleaner_log:
        params.update({ 'logformat' : o.cleaner_logformat, 'timeformat' : o.timeformat, 'levelname' : logging.getLevelName(logging.WARN), 'process_id' : process_id})
        o.vcc_logger.debug(build_message(params))

def trace(params = {}):
    if o.enable_trace_log:
        params.update({ 'logformat' : o.trace_logformat, 'timeformat' : o.timeformat, 'process_id' : process_id })
        o.trace_logger.info(build_message(params))

def cleaner_error(error_code):
    """Report error while cleaning videocache with proper error code."""
    help_message =  """
Usage: vc-cleaner -h (as root/super user)
Videocache cleaner script can only be used if Videocache is installed on your system.
Please see http://cachevideos.com/#vc-cleaner for more information or getting help.
"""
    uid_error = """
You must be root to run videocache cleaner.
Please see http://cachevideos.com/#vc-cleaner for more information or getting help.
"""
    import_error = """
Could not import required modules. Please check your videocache installation.
Run vc-update command to update your installation.
"""
    if error_code == 'uid':
        sys.stderr.write(uid_error)
    if error_code == 'usage':
        sys.stderr.write(help_message)
    if error_code == 'import':
        sys.stderr.write(import_error)
    sys.exit(1)

def syslog_msg(msg):
    syslog.syslog(syslog.LOG_ERR | syslog.LOG_DAEMON, msg)

def error_and_syslog(msg):
    sys.stderr.write(msg + '\n')
    syslog_msg(msg)
    sys.exit(1)

def cleancache():
    """Perform the cleanup."""
    cur_time = time.time()

    for (website_id, dir_list) in o.base_dirs.items():
        for dir in dir_list:
            if os.path.isdir(dir):
                info( { 'code' : CACHE_DIR_CHECK, 'message' : 'Checking cache directory ' + str(dir) + ' for stale videos.', 'website_id' : website_id } )
                for video_id in os.listdir(dir):
                    video_path = os.path.join(dir, video_id)
                    try:
                        if os.path.isfile(video_path):
                            if (cur_time - os.stat(video_path)[stat.ST_ATIME]) > o.video_lifetime * 86400:
                                age = int((cur_time - os.stat(video_path)[stat.ST_ATIME]) / 86400)
                                os.remove(video_path)
                                info( { 'code' : VIDEO_PURGED, 'message' : 'Video older than ' + str(age) + ' days was purged from cache.', 'website_id' : website_id, 'video_id' : video_id } )
                        else:
                            warn( { 'code' : VIDEO_PURGE_WARN, 'message' : 'Not a file or file does not exist.', 'website_id' : website_id, 'video_id' : video_id } )
                    except Exception, e:
                        error({ 'code' : VIDEO_PURGE_ERR, 'message' : 'Error occured while purging video at ' + video_path + '.', 'website_id' : website_id, 'video_id' : video_id, 'debug' : str(e) })
                        trace({ 'code' : VIDEO_PURGE_ERR, 'message' : traceback.format_exc(), 'website_id' : website_id, 'video_id' : video_id })
            else:
                warn( { 'code' : CACHE_DIR_NOT_FOUND, 'message' : 'Cache directory ' + dir + ' does not exist. Please use vc-update command to update cache directories.', 'website_id' : website_id } )
    return

if __name__ == '__main__':
    # Parse command line options.
    parser = OptionParser()
    parser.add_option('-p', '--prefix', dest = 'vc_root', type='string', help = 'Specify an alternate root location for videocache', default = '/')
    parser.add_option('-c', '--config', dest = 'config_file', type='string', help = 'Use an alternate configuration file', default = '/etc/videocache.conf')
    options, args = parser.parse_args()

    if os.getuid() != 0:
        syslog_msg('vc-cleaner: Videocache cleaner must be run as root or super user.')
        cleaner_error('uid')

    install_dir = os.path.join(options.vc_root, 'usr/share/videocache/')
    # Try to locate the videocache directory containing python files.
    if os.path.isdir(install_dir):
        sys.path = [install_dir] + sys.path
        try:
            from vcoptions import VideocacheOptions
            from common import *
            from error_codes import *
        except Exception, e:
            syslog_msg('vc-cleaner: Could not import required modules. Please check your videocache installation. Run vc-update command to update your installation.')
            cleaner_error('import')
    elif os.path.isdir('/usr/share/videocache/'):
        sys.path = ['/usr/share/videocache/'] + sys.path
        try:
            from vcoptions import VideocacheOptions
            from common import *
            from error_codes import *
        except Exception, e:
            syslog_msg('vc-cleaner: Could not import required modules. Please check your videocache installation. Run vc-update command to update your installation.')
            cleaner_error('import')
    else:
        syslog_msg('vc-cleaner: Could not locate videocache installation. Please make sure videocache is installed properly.')
        cleaner_error('usage')

    try:
        o = VideocacheOptions(options.config_file, options.vc_root)
    except Exception, e:
        log_traceback()
        error_and_syslog('vc-cleaner: Could not read options from configuration file.')

    if o.halt:
        error_and_syslog('vc-cleaner: One or more errors occured in reading configure file. Please check syslog messages generally located at /var/log/messages.')

    try:
        uid = pwd.getpwnam( o.videocache_user ).pw_uid
    except Exception, e:
        uid = None

    if uid == None:
        log_traceback()
        error_and_syslog('vc-cleaner: Could not determine User ID for videocache user ' + o.videocache_user + '. Please check videocache_user option in /etc/videocache.conf file. \nDebugging output: \n' + traceback.format_exc())

    os.setgid(uid)
    os.setuid(uid)

    if o.set_loggers() == None:
        error_and_syslog('vc-cleaner: Error occured while setting up loggers. Please check syslog messages generally located at /var/log/messages.')

    process_id = os.getpid()
    if not o.enable_videocache_cleaner:
        info( { 'code' : CLEANER_DISABLED, 'message' : 'Videocache Cleaner is disabled in configuration file. Please set enable_videocache_cleaner to 1 if you want to use videocache cleaner.' } )

    info( { 'code' : CLEANER_START, 'message' : 'Starting Videocache Cleaner to purge stale videos from cache.' } )
    try:
        cleancache()
    except Exception, e:
        error( { 'code' : CLEANER_ERR, 'message' : 'Error occured while cleaning up stale videos.', 'debug' : str(e) } )
        trace( { 'code' : CLEANER_ERR, 'message' : traceback.format_exc() } )
    info( { 'code' : CLEANER_STOP, 'message' : 'Stopping Videocache Cleaner.' } )


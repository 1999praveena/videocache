#!/usr/bin/env python
#
# (C) Copyright Kulbir Saini <saini@saini.co.in>
# Product Website : http://cachevideos.com/
#

__author__ = """Kulbir Saini <saini@saini.co.in>"""
__docformat__ = 'plaintext'

from optparse import OptionParser

import os
import sys
import traceback

def red(msg):
    return "\033[1;31m%s\033[0m" % msg

def blue(msg):
    return "\033[1;36m%s\033[0m" % msg

def green(msg):
    return "\033[1;32m%s\033[0m" % msg

def print_message_and_abort(message):
    print >>sys.stderr, message
    sys.exit(1)

def log_traceback():
    print blue('\n' + '-' * 25 + 'Traceback Begin' + '-' * 25)
    print traceback.format_exc(),
    print blue('-' * 25 + 'Traceback End' + '-' * 27 + '\n')

def update_error(error_code):
    """Report error while updating/installing videocache with proper error code."""
    messages = {}
    messages['usage'] =  """
Usage: vc-update (as root/super user)
Update script can only be used if Videocache is already installed on your system.
Please see http://cachevideos.com/#vc-update for more information or getting help."""
    messages['update'] =  """

An error has occured while updating videocache.
Please see http://cachevideos.com/#vc-update for more information or getting help."""
    messages['uid'] = """
You must be root to update Videocache installation.
Please see http://cachevideos.com/#vc-update for more information or getting help."""
    if error_code in messages:
        return messages[error_code]
    return

def update_vc(o, install_dir, quiet):
    """Perform the update."""
    etc_dir = '/etc/'
    usr_sbin_dir = '/usr/sbin/'

    error = red(update_error('update'))
    apache_conf_dir = ''
    if o.skip_apache_conf == 0 and o.apache_conf_dir != '':
        apache_conf_dir = o.apache_conf_dir

    dirs_to_create = [etc_dir, usr_sbin_dir]
    if apache_conf_dir != '':
        dirs_to_create.append(apache_conf_dir)

    for dir in dirs_to_create:
        if not create_or_update_dir(dir, None, 0755, quiet):
            print_message_and_abort(red("Could not create directory %s" % dir) + error)

    for dir in sum([o.base_dir_list] + [[o.logdir, os.path.join(o.logdir, '.lock')]] + [v for (k, v) in o.base_dirs.items()], []):
        if not create_or_update_dir(dir, o.videocache_user, 0755, quiet):
            print_message_and_abort(red("Could not create directory %s" % dir) + error)

    # move pidfile.txt to lock dir
    if os.path.isfile(os.path.join(o.logdir, o.pidfile)):
        move_file(os.path.join(o.logdir, o.pidfile), o.pidfile_path, quiet)

    # Generate Apache webserver configuration file for videocache.
    if apache_conf_dir and not generate_httpd_conf(os.path.join(apache_conf_dir, 'videocache.conf'), o.base_dir_list, o.cache_host, o.hide_cache_dirs, quiet):
        print_message_and_abort(red("Could not generate Apache specific configuration file at %s" % os.path.join(apache_conf_dir, 'videocache.conf')) + error)

    print green("Videocache updated successfully. Please follow the following instructions now.\n")
    print blue("----------------------------------Step 1-----------------------------------------")
    print red("Restart Apache web server on your machine by using the following command")
    print red("[root@localhost ~]# apachectl -k restart\n")
    print blue("----------------------------------Step 2-----------------------------------------")
    print red("Restart videocache scheduler vc-scheduler using the following command.")
    print red("[root@localhost ~]# vc-scheduler -s restart\n")
    print blue("----------------------------------Step 3-----------------------------------------")
    print red("Restart Squid proxy server daemon using the following command.")
    print red("[root@localhost ~]# /etc/init.d/squid restart\n")
    print green("In case of any bugs or problems, visit http://cachevideos.com/ and contact us.")

if __name__ == '__main__':
    # Parse command line options.
    parser = OptionParser()
    parser.add_option('-v', '--verbose', dest = 'verbose', action='store_true', help = 'Print detailed log messages.', default = False)
    options, args = parser.parse_args()

    if os.getuid() != 0:
        print_message_and_abort(red(update_error('uid')))

    install_dir = '/usr/share/videocache/'
    # Try to locate the videocache directory containing python files.
    try:
        if os.path.isdir(install_dir):
            sys.path = [install_dir] + sys.path
            from vcoptions import VideocacheOptions
            from common import *
            from fsop import *
        else:
            print_message_and_abort(red("Could not locate the videocache source directory.\n%s" % update_error('usage')))
    except Exception, e:
        log_traceback()
        print_message_and_abort(red("\nCould not import required modules for update.") + green("\nIf you contact us regarding this error, please send the Trace above."))

    try:
        o = VideocacheOptions('/etc/videocache.conf', True, True)
    except Exception, e:
        log_traceback()
        print_message_and_abort(red("\nCould not read options from configuration file located at /etc/videocache.conf.") + green("\nIf you contact us regarding this error, please send the Trace above."))

    if o.halt:
        print_message_and_abort(red('\nOne or more errors occured in reading configuration file.\nPlease check syslog messages generally located at /var/log/messages.') + green("\nIf you contact us regarding this error, please send the log messages."))

    update_vc(o, install_dir, not options.verbose)

